<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Buy me coffee • M Share</title>
  <meta name="description" content="Copy bank details and open your banking app quickly.">
  <link rel="stylesheet" href="style.css" />
  <style>
    .fields { display:grid; gap:8px; grid-template-columns: 1fr auto; }
    .field { display:grid; grid-template-columns: 1fr auto; align-items:center; gap:8px; }
    .copy-mini { border:1px solid var(--b); background:#0a1020; border-radius:10px; padding:8px 10px; cursor:pointer; }
    .copy-mini:focus-visible{ outline:2px solid var(--accent); outline-offset:2px }
    .chooser { position:fixed; inset:0; background:rgba(3,8,18,.6); display:none; place-items:center; }
    .chooser.open{ display:grid; }
    .chooser-card{ width:min(560px,96vw); background:var(--surface); border:1px solid var(--b);
      border-radius:16px; box-shadow:var(--shadow-1); padding:16px; }
    .chooser-list{ display:flex; flex-wrap:wrap; gap:8px; margin-top:8px }
    .chooser .close{ float:right; border:none; background:#0a1020; color:var(--fg); border:1px solid var(--b);
      border-radius:10px; padding:8px 10px; cursor:pointer; }
  </style>
  <link rel="stylesheet" href="assets/css/ux-fixes.css" />

  <link rel="stylesheet" href="assets/css/footer-2025.css" />
  <link rel="stylesheet" href="assets/css/header-2025.css" />
  <link rel="stylesheet" href="assets/css/nav-footer-uni.css" />
<link rel="stylesheet" href="assets/css/responsive-fixes.css"/>
<link rel="icon" type="image/png" sizes="32x32" href="icons/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="icons/favicon-16x16.png" />
<link rel="apple-touch-icon" href="icons/apple-touch-icon.png" />
<link rel="manifest" href="manifest.webmanifest" />
  <link rel="stylesheet" href="assets/css/nav-unified.css">
  <link rel="stylesheet" href="assets/css/voice-coach-pro.css">
  <link rel="stylesheet" href="voice-coach-fix.css">




<style id="mpl-mobile-nav-style-v4">
  /* Ensure [hidden] truly hides dropdowns in any theme */
  nav .menu[hidden], nav .submenu[hidden] { display:none !important; }

  /* Small/medium behavior only */
  @media (max-width: 1024px) {
    /* Collapsible whole nav */
    #mainNav[hidden] { display: none !important; }
    /* Group baseline */
    .nav-group, .menu-group { position: relative; }
    /* When marked open, reveal child menu block / list */
    .nav-group.open > .menu,
    .menu-group.open > .submenu { display:block; }

    /* Clickable targets (chevrons/toggles) */
    .nav-group > .menu-toggle,
    .nav-group > .chevron,
    .nav-group [data-chevron],
    .menu-group > .menu-toggle,
    .menu-group > .chevron,
    .menu-group [data-chevron] { cursor:pointer; touch-action: manipulation; }

    /* A11y focus rings on triggers */
    .nav-group > a:focus,
    .nav-group > button:focus,
    .nav-group > .menu-toggle:focus,
    .nav-group > .chevron:focus,
    .menu-group > a:focus,
    .menu-group > button:focus,
    .menu-group > .menu-toggle:focus,
    .menu-group > .chevron:focus { outline:2px solid currentColor; outline-offset:2px; }
  }

  /* Hamburger is hidden on desktop */
  @media (min-width: 1025px) { #navToggle{ display:none !important; } }
</style>





<style id="mpl-desktop-nav-css-v3">
/* Desktop-only navigation helpers (visibility + a11y) */
@media (min-width:1025px){
  .mpl-nav-toggle{display:inline-flex;align-items:center;gap:.25rem;background:none;border:0;padding:.25rem;margin-left:.25rem;cursor:pointer;line-height:1}
  .mpl-nav-toggle:focus,.mpl-nav-toggle:focus-visible{outline:2px solid currentColor;outline-offset:2px}
  [data-mpl-submenu]{display:none;visibility:hidden}
  [data-mpl-open="true"] > [data-mpl-submenu]{display:block;visibility:visible}
  .mpl-chevron{display:inline-block;transform:rotate(0deg);transition:transform .2s ease}
  [data-mpl-open="true"] .mpl-chevron{transform:rotate(180deg)}
  .mpl-sr-only{position:absolute!important;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}
}
</style>


<script id="mpl-desktop-nav-js-v3">
/* Desktop submenu behavior — hover or click, one open, ESC/Outside close, a11y */
(() => {
  const mq = window.matchMedia('(min-width:1025px)');
  let enabled = false;
  let cleanups = [];
  const q = (sel, ctx=document) => Array.from(ctx.querySelectorAll(sel));

  function findSubmenu(el){
    return el.querySelector(':scope > .submenu, :scope > [role="menu"], :scope > ul, :scope > .dropdown-menu, :scope > ol');
  }

  function findTopNavGroups(){
    const navs = q('header nav, nav[role="navigation"], nav.primary, .navbar nav, nav');
    const groups = new Set();
    navs.forEach(nav => {
      const topChildren = [];
      const ul = nav.querySelector(':scope > ul');
      if (ul) topChildren.push(...Array.from(ul.children));
      else topChildren.push(...Array.from(nav.children));
      topChildren.forEach(node => {
        const sub = findSubmenu(node);
        if (sub) groups.add(node);
      });
    });
    return Array.from(groups);
  }

  function closeAll(except){
    q('[data-mpl-open="true"]').forEach(g=>{
      if (except && g === except) return;
      g.setAttribute('data-mpl-open','false');
      const t = g.querySelector(':scope > .mpl-nav-toggle');
      if (t) t.setAttribute('aria-expanded','false');
    });
  }

  function enhance(){
    if (enabled) return;
    enabled = true;

    const groups = findTopNavGroups();
    if (!groups.length) return;

    groups.forEach(group=>{
      const submenu = findSubmenu(group);
      if (!submenu) return;
      submenu.setAttribute('data-mpl-submenu','true');
      group.setAttribute('data-mpl-nav-group','true');
      if (!group.hasAttribute('data-mpl-open')) group.setAttribute('data-mpl-open','false');

      // Label is the first focusable/control on the group (but outside submenu)
      let label = group.querySelector(':scope > a, :scope > button, :scope > [role="button"], :scope > .label, :scope > .menu-label');
      if (!label) label = group.firstElementChild;

      // Toggle button (desktop-only)
      let toggle = group.querySelector(':scope > .mpl-nav-toggle');
      if (!toggle) {
        toggle = document.createElement('button');
        toggle.type = 'button';
        toggle.className = 'mpl-nav-toggle';
        toggle.setAttribute('aria-haspopup','menu');
        toggle.setAttribute('aria-expanded','false');
        toggle.setAttribute('title','Toggle submenu');
        toggle.innerHTML = '<span class="mpl-chevron" aria-hidden="true">▾</span><span class="mpl-sr-only">Toggle submenu</span>';
        if (label && label.nextSibling) group.insertBefore(toggle, label.nextSibling);
        else group.appendChild(toggle);
      }

      const open = () => {
        if (!mq.matches) return;
        closeAll(group);
        group.setAttribute('data-mpl-open','true');
        toggle.setAttribute('aria-expanded','true');
      };
      const close = () => {
        if (!mq.matches) return;
        group.setAttribute('data-mpl-open','false');
        toggle.setAttribute('aria-expanded','false');
      };

      const onEnter = () => open();
      const onLeave = (e) => {
        // close only when leaving group entirely
        const rel = e.relatedTarget;
        if (rel && group.contains(rel)) return;
        close();
      };
      const onToggle = (e) => {
        if (!mq.matches) return;
        e.preventDefault();
        const isOpen = group.getAttribute('data-mpl-open') === 'true';
        if (isOpen) close(); else open();
      };
      const onKeys = (e) => {
        if (!mq.matches) return;
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onToggle(e); }
        else if (e.key === 'Escape') { e.preventDefault(); close(); toggle.focus(); }
      };

      group.addEventListener('mouseenter', onEnter);
      group.addEventListener('mouseleave', onLeave);
      toggle.addEventListener('click', onToggle);
      toggle.addEventListener('keydown', onKeys);

      cleanups.push(()=> {
        group.removeEventListener('mouseenter', onEnter);
        group.removeEventListener('mouseleave', onLeave);
        toggle.removeEventListener('click', onToggle);
        toggle.removeEventListener('keydown', onKeys);
      });
    });

    const onDocClick = (e) => {
      if (!mq.matches) return;
      const openEl = document.querySelector('[data-mpl-open="true"]');
      if (!openEl) return;
      if (openEl.contains(e.target)) return;
      openEl.setAttribute('data-mpl-open','false');
      const t = openEl.querySelector(':scope > .mpl-nav-toggle');
      if (t) t.setAttribute('aria-expanded','false');
    };
    const onDocEsc = (e) => {
      if (!mq.matches) return;
      if (e.key === 'Escape') {
        const openEl = document.querySelector('[data-mpl-open="true"]');
        if (!openEl) return;
        openEl.setAttribute('data-mpl-open','false');
        const t = openEl.querySelector(':scope > .mpl-nav-toggle');
        if (t) { t.setAttribute('aria-expanded','false'); t.focus(); }
      }
    };
    document.addEventListener('click', onDocClick);
    document.addEventListener('keydown', onDocEsc);
    cleanups.push(()=>{ document.removeEventListener('click', onDocClick); document.removeEventListener('keydown', onDocEsc); });
  }

  function teardown(){
    if (!enabled) return;
    closeAll();
    cleanups.forEach(fn => { try { fn(); } catch(_){} });
    cleanups = [];
    enabled = false;
  }

  const react = () => { mq.matches ? enhance() : teardown(); };
  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', react);
  else react();
  mq.addEventListener('change', react);
})();
</script>

</head>
<body>
<a id="top" style="position:absolute;top:0;left:0;width:0;height:0;overflow:hidden"> </a>
  <header class="site-header">
  <div class="container navbar">
    <a id="brandLink" class="brand" data-href="index.html" href="index.html"><span class="logo">M</span><span class="brand-text">M Share</span></a>
    <nav class="main-nav" id="mainNav">
  <a data-href="index.html">Wellbeing</a>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">Conditions <span class="icon">▾</span></button>
    <div class="submenu">
      <div class="menu-label">Neurodevelopmental</div>
      <a data-href="autism.html">Autism</a>
      <a data-href="adhd.html">ADHD</a>
      <a data-href="dyslexia-reading-training.html">Dyslexia</a>
      <div class="menu-label">Mental Health</div>
      <a data-href="anxiety.html">Anxiety</a>
      <a data-href="depression.html">Depression</a>
      <a data-href="stress.html">Stress</a>
      <a data-href="sleep.html">Sleep</a>
    </div>
  </div>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">Breathing &amp; Focus <span class="icon">▾</span></button>
    <div class="submenu">
      <div class="menu-label">Guides</div>
      <a data-href="breath.html">Breath (how‑to)</a>
      <a data-href="focus.html">Focus</a>
      <a data-href="mindfulness.html">Mindfulness</a>
      <div class="menu-label">Techniques</div>
      <a data-href="sos-60.html">60‑second Reset</a>
      <a data-href="box-breathing.html">Box Breathing</a>
      <a data-href="4-7-8-breathing.html">4‑7‑8 Breathing</a>
      <a data-href="coherent-5-5.html">Coherent 5‑5</a>
    </div>
  </div>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">Toolkits <span class="icon">▾</span></button>
    <div class="submenu">
      <div class="menu-label">General</div>
      <a data-href="sleep-tools.html">Sleep Tools</a>
      <a data-href="breath-tools.html">Breath Tools</a>
      <a data-href="mood-tools.html">Mood Tools</a>
      <div class="menu-label">Condition‑specific</div>
      <a data-href="adhd-tools.html">ADHD Tools</a>
      <a data-href="autism-tools.html">Autism Tools</a>
      <a data-href="depression-tools.html">Depression Tools</a>
      <a data-href="anxiety-tools.html">Anxiety Tools</a>
      <a data-href="stress-tools.html">Stress Tools</a>
    </div>
  </div>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">About <span class="icon">▾</span></button>
    <div class="submenu">
      <a data-href="about.html">About</a>
      <a data-href="coffee.html">Support Us</a>
      <a data-href="contact.html">Contact</a>
    </div>
  </div>
</nav>
    <button type="button" id="navToggle" class="nav-toggle" aria-label="Menu" aria-expanded="false" aria-controls="mainNav">☰</button>
  </div>
</header>




  <main class="container">
    <div class="card">
      <h1>Buy me a coffee ☕</h1>
      <p class="muted">Tap <b>Copy details</b> then <b>Open bank app</b>. We try your installed app first and gracefully fall back.</p>

      <div class="kv-grid" style="margin-top:12px">
        <div class="kv"><div class="muted">Account name</div><div id="accName" style="font-weight:600">—</div></div>
        <div class="kv"><div class="muted">Bank</div><div id="bankName" style="font-weight:600">—</div></div>
        <div class="kv"><div class="muted">Reference</div><div id="ref" style="font-weight:600">M SHARE</div></div>
        <div class="kv"><div class="muted">Account number</div><div id="acc" style="font-weight:600">—</div></div>
        <div class="kv"><div class="muted">Sort code</div><div id="sort" style="font-weight:600">—</div></div>
        <div class="kv"><div class="muted">IBAN</div><div id="iban" style="font-weight:600">—</div></div>
      </div>

      <div class="actions">
        <button type="button" class="btn" id="copyAll">📋 Contact Us For Bank Details</button>
        <button type="button" class="btn" id="openChooser">🏦 Open bank app</button>
        <span id="feedback" class="muted"></span>
      </div>

      <div class="card" style="margin-top:12px">
        <h3 style="margin-top:0">Quick copy (single fields)</h3>
        <div class="fields">
          <div class="field"><div class="muted">Name</div><div id="f_name" class="val">—</div></div>
          <button type="button" class="copy-mini" data-k="payee_full_name">Copy</button>

          <div class="field"><div class="muted">Bank</div><div id="f_bank" class="val">—</div></div>
          <button type="button" class="copy-mini" data-k="bank_name">Copy</button>

          <div class="field"><div class="muted">Account</div><div id="f_acc" class="val">—</div></div>
          <button type="button" class="copy-mini" data-k="account_number">Copy</button>

          <div class="field"><div class="muted">Sort code</div><div id="f_sort" class="val">—</div></div>
          <button type="button" class="copy-mini" data-k="sort_code">Copy</button>

          <div class="field"><div class="muted">IBAN</div><div id="f_iban" class="val">—</div></div>
          <button type="button" class="copy-mini" data-k="iban">Copy</button>
        </div>
        <p class="muted" style="margin-top:8px">On iOS 16+, allow paste if prompted.</p>
      </div>
    </div>
  </main>
<footer class="footer-2025" id="footer2025">
  <div class="wrap">
    <div class="grid">
      <section class="col brand">
        <div class="brandline"><span class="logo">M</span>
          <div><b>M Share</b><div class="muted">Quiet, practical tools for mental health and wellbeing.</div></div>
        </div>
        <div class="theme-controls">
          <label>Background<input id="themeColor" type="color" value="#0f172a"></label>
          <label>Brightness<input id="themeBrightness" type="range" min="0.85" max="1.25" step="0.01" value="1"></label>
        </div>
        <div class="actions" style="margin-top:8px"><a class="btn" href="#top" id="backToTop">Back to top ↑</a></div>
      </section>
      <section class="col">
        <h4>Explore</h4>
        <p><a data-href="index.html" href="index.html">Wellbeing</a> • <a data-href="breath.html" href="breath.html">Breath</a> • <a data-href="focus.html" href="focus.html">Focus</a> • <a data-href="mindfulness.html" href="mindfulness.html">Mindfulness</a> • <a data-href="about.html" href="about.html">About</a></p>
      </section>
      <section class="col">
        <h4>Toolkits</h4>
        <p><a data-href="mood-tools.html" href="mood-tools.html">Mood</a> • <a data-href="breath-tools.html" href="breath-tools.html">Breath Tools</a> • <a data-href="sleep-tools.html" href="sleep-tools.html">Sleep</a> • <a data-href="anxiety-tools.html" href="anxiety-tools.html">Anxiety</a> • <a data-href="stress-tools.html" href="stress-tools.html">Stress</a></p>
      </section>
      <section class="col">
        <h4>Contact</h4>
        <p><a data-href="contact.html" href="contact.html">Contact</a> • <a href="mailto:info.com">info.com</a></p>
      </section>
    </div>
    <div class="bottom">
      <div>© <span id="yearFooter"></span> MindPayLink · Educational information only; not medical advice.</div>
      <div class="credit">Designed by <b>Alkhadi M Koroma</b></div>
    </div>
  </div>
  <script>document.getElementById("yearFooter")&&(document.getElementById("yearFooter").textContent=(new Date).getFullYear());document.getElementById("backToTop")&&document.getElementById("backToTop").addEventListener("click",function(e){e.preventDefault();try{(document.getElementById("top")||document.body).scrollIntoView({behavior:"smooth",block:"start"})}catch{location.hash="#top"}})</script>
</footer>







  <!-- chooser -->
  <div id="chooser" class="chooser" role="dialog" aria-modal="true" aria-labelledby="chooserTitle">
    <div class="chooser-card">
      <button type="button" class="close" id="chooserClose" aria-label="Close">✕</button>
      <h3 id="chooserTitle" style="margin:0 0 6px">Choose your bank</h3>
      <div class="chooser-list" id="chooserList"></div>
      <p class="muted" style="margin-top:10px">If nothing opens, open your bank app manually and paste the copied details.</p>
    </div>
  </div>

  <!-- Share sheet -->
  <div id="shareSheet" class="sheet hidden">
    <div id="shareBackdrop" style="position:absolute; inset:0;"></div>
    <div class="sheet-card" role="dialog" aria-modal="true" aria-labelledby="shareTitle">
      <div class
  <script defer src="assets/js/nav-unified.js"></script>
  <script defer src="assets/js/voice-coach-pro.js"></script>


<script id="menu-chevron-fix">
(function(){
  var onReady = function(fn){
    if(document.readyState!=='loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  };

  function findSubmenu(btn){
    if(!btn || !btn.closest) return null;
    var ctrl = btn.getAttribute && btn.getAttribute('aria-controls');
    if(ctrl){
      var el = document.getElementById(ctrl);
      if(el) return el;
    }
    var li = btn.closest('li, .has-children, .accordion-item, nav, .menu, .accordion');
    if(li){
      // direct child UL/.submenu/[role="menu"]
      var q = li.querySelector(':scope > ul, :scope > .submenu, :scope > [role="menu"]');
      if(q) return q;
    }
    return null;
  }

  function setOpen(btn, submenu, open){
    if(!btn || !submenu) return;
    btn.setAttribute('aria-expanded', String(open));
    submenu.setAttribute('aria-hidden', String(!open));
    if(open){
      submenu.removeAttribute('hidden');
      if(getComputedStyle(submenu).display==='none'){ submenu.style.display = 'block'; }
    }else{
      submenu.setAttribute('hidden','');
      submenu.style.display = 'none';
    }
    var host = btn.closest('.has-children, li, .accordion-item');
    if(host) host.classList.toggle('open', open);
  }

  function shouldIntercept(btn){
    if(!btn) return false;
    if(btn.classList && (btn.classList.contains('hamburger') || btn.classList.contains('menu-chevron') || btn.classList.contains('chevron'))) return true;
    if(btn.hasAttribute && (btn.hasAttribute('data-chevron') || btn.getAttribute('role') === 'button')) return true;
    // If it's a link used only as a toggle (href="#"), intercept
    if(btn.tagName === 'A' && btn.getAttribute('href') && btn.getAttribute('href').trim() === '#') return true;
    // For button elements, default to intercept
    if(btn.tagName === 'BUTTON') return true;
    return false;
  }

  onReady(function(){
    // Initialize ARIA to reflect current state
    var toggles = Array.prototype.slice.call(document.querySelectorAll(
      '.hamburger, .menu-chevron, .chevron, [data-chevron], [aria-haspopup="menu"], .has-children > a, .has-children > button, .accordion-toggle'
    ));
    toggles.forEach(function(btn){
      var submenu = findSubmenu(btn);
      if(!submenu) return;
      var cs = getComputedStyle(submenu);
      var hiddenNow = submenu.hasAttribute('hidden') || submenu.getAttribute('aria-hidden') === 'true' || cs.display === 'none' || cs.visibility === 'hidden';
      setOpen(btn, submenu, !hiddenNow);
    });

    function handleTrigger(target, e){
      var btn = target && (target.closest
        ? target.closest('.hamburger, .menu-chevron, .chevron, [data-chevron], [aria-haspopup="menu"], .has-children > a, .has-children > button, .accordion-toggle')
        : null);
      if(!btn) return false;

      var submenu = findSubmenu(btn);
      if(!submenu) return false;

      var intercept = shouldIntercept(btn);
      if(intercept && e) e.preventDefault();

      var open = btn.getAttribute('aria-expanded') === 'true';
      setOpen(btn, submenu, !open);
      return true;
    }

    document.addEventListener('click', function(e){
      if(handleTrigger(e.target, e)) return;
    }, {passive:false});

    document.addEventListener('touchstart', function(e){
      // Some mobile Safari builds send only touchstart for quick taps
      handleTrigger(e.target, e);
    }, {passive:false});

    document.addEventListener('keydown', function(e){
      var k = e.key;
      if(k==='Enter' || k===' '){
        if(handleTrigger(e.target, e)){ e.preventDefault(); }
      }
    }, {passive:false});
  });
})();
<\/script>



<style id="mpl-vc-drag-css-v3">
/* Voice Coach draggable panel + pin/unpin (desktop & mobile) */
[data-mpl-vc]{position:fixed;z-index:2147483646;max-width:min(90vw,480px)}
#mpl-vc-handle{display:flex;align-items:center;justify-content:space-between;gap:.5rem;padding:.5rem .75rem;font-weight:600;cursor:move;user-select:none}
#mpl-vc-handle:focus,#mpl-vc-handle:focus-visible{outline:2px solid currentColor;outline-offset:2px}
#mpl-vc-pin{border:1px solid currentColor;background:transparent;padding:.25rem .5rem;border-radius:.25rem;cursor:pointer}
#mpl-vc-pin:focus,#mpl-vc-pin:focus-visible{outline:2px solid currentColor;outline-offset:2px}
[data-mpl-vc][data-pinned="true"] #mpl-vc-handle{cursor:default;opacity:.95}
.mpl-vc-hidden{display:none!important}
</style>


<script id="mpl-vc-drag-js-v3">
/* Voice Coach panel: add handle, drag/pin with persistence (mpl.vc.pref.v1) */
(() => {
  const KEY='mpl.vc.pref.v1';
  const sel = '#voiceCoachPanel, #voiceCoach, #vcPanel, .voice-coach, #vc-focus-panel';
  const panel = document.querySelector(sel);
  if (!panel) return;

  try {
    panel.setAttribute('data-mpl-vc','');
    panel.style.touchAction = 'none';

    // Insert handle if missing
    let handle = panel.querySelector('#mpl-vc-handle');
    if (!handle) {
      handle = document.createElement('div');
      handle.id = 'mpl-vc-handle';
      handle.tabIndex = 0;
      handle.setAttribute('role','toolbar');
      const title = document.createElement('span');
      title.textContent = 'Voice Coach';
      const pin = document.createElement('button');
      pin.id = 'mpl-vc-pin';
      pin.type = 'button';
      pin.setAttribute('aria-pressed','false');
      pin.textContent = 'Pin';
      handle.appendChild(title);
      handle.appendChild(pin);
      panel.prepend(handle);
    }
    const pinBtn = handle.querySelector('#mpl-vc-pin');

    // Load / apply state
    const state = (() => {
      try { return Object.assign({x: null, y: null, pinned: false}, JSON.parse(localStorage.getItem(KEY) || '{}')); }
      catch { return {x:null,y:null,pinned:false}; }
    })();

    function save(){ try { localStorage.setItem(KEY, JSON.stringify(state)); } catch(_){} }

    function clamp(v, min, max){ return Math.max(min, Math.min(max, v)); }

    function applyPosition(){
      const vw = window.innerWidth, vh = window.innerHeight;
      const rect = panel.getBoundingClientRect();
      const w = rect.width || 320, h = rect.height || 180;

      // Defaults: bottom-right 24px
      let x = state.x ?? (vw - w - 24);
      let y = state.y ?? (vh - h - 24);
      x = clamp(x, 8, Math.max(8, vw - w - 8));
      y = clamp(y, 8, Math.max(8, vh - h - 8));

      // NOTE: avoid backticks inside outer template literal
      panel.style.left = (x + 'px');
      panel.style.top  = (y + 'px');
    }

    function applyPinned(){
      panel.setAttribute('data-pinned', String(!!state.pinned));
      pinBtn.setAttribute('aria-pressed', String(!!state.pinned));
      pinBtn.textContent = state.pinned ? 'Unpin' : 'Pin';
    }

    applyPosition(); applyPinned();
    window.addEventListener('resize', applyPosition);

    // Dragging
    let dragging = false, startX=0, startY=0, originX=0, originY=0;

    const startDrag = (clientX, clientY) => {
      if (state.pinned) return;
      dragging = true;
      const rect = panel.getBoundingClientRect();
      originX = rect.left; originY = rect.top;
      startX = clientX; startY = clientY;
      document.body.style.userSelect = 'none';
    };
    const moveDrag = (clientX, clientY) => {
      if (!dragging) return;
      const dx = clientX - startX, dy = clientY - startY;
      state.x = Math.round(originX + dx);
      state.y = Math.round(originY + dy);
      applyPosition();
    };
    const endDrag = () => {
      if (!dragging) return;
      dragging = false;
      document.body.style.userSelect = '';
      save();
    };

    // Mouse
    handle.addEventListener('mousedown', (e)=>{
      if (e.target === pinBtn) return; // allow click on pin
      e.preventDefault();
      startDrag(e.clientX, e.clientY);
    });
    document.addEventListener('mousemove', (e)=> moveDrag(e.clientX, e.clientY));
    document.addEventListener('mouseup', endDrag);

    // Touch
    handle.addEventListener('touchstart', (e)=>{
      if (e.target === pinBtn) return;
      const t = e.touches[0]; if (!t) return;
      startDrag(t.clientX, t.clientY);
    }, {passive:true});
    document.addEventListener('touchmove', (e)=>{
      if (!dragging) return;
      const t = e.touches[0]; if (!t) return;
      moveDrag(t.clientX, t.clientY);
    }, {passive:true});
    document.addEventListener('touchend', endDrag);

    // Keyboard on handle
    handle.addEventListener('keydown', (e)=>{
      const step = (e.shiftKey?20:10);
      if (e.key === 'Enter') { e.preventDefault(); state.pinned = !state.pinned; applyPinned(); save(); }
      if (state.pinned) return;
      if (e.key === 'ArrowLeft'){ e.preventDefault(); state.x = (state.x ?? panel.getBoundingClientRect().left) - step; applyPosition(); save(); }
      if (e.key === 'ArrowRight'){ e.preventDefault(); state.x = (state.x ?? panel.getBoundingClientRect().left) + step; applyPosition(); save(); }
      if (e.key === 'ArrowUp'){ e.preventDefault(); state.y = (state.y ?? panel.getBoundingClientRect().top) - step; applyPosition(); save(); }
      if (e.key === 'ArrowDown'){ e.preventDefault(); state.y = (state.y ?? panel.getBoundingClientRect().top) + step; applyPosition(); save(); }
      if (e.key === 'Escape'){ e.preventDefault(); state.pinned = true; applyPinned(); save(); }
    });

    // Pin button
    pinBtn.addEventListener('click', (e)=>{
      e.preventDefault();
      state.pinned = !state.pinned;
      applyPinned(); save();
    });
  } catch (err) {
    try { panel.classList.add('mpl-vc-hidden'); panel.style.display='none'; } catch(_){}
  }
})();
</script>


<style id="mpl-theme-vars-css-v3">
:root{
  --bg:#f7f7fb;
  --fg:#111111;
  --muted:#6b7280;
  --b:rgba(0,0,0,0.12);
  --brightness:1;
  color-scheme: light dark;
}
html{background:var(--bg);color:var(--fg);filter:brightness(var(--brightness));}
body{background:transparent}
.mpl-theme-row{font:inherit}
.mpl-theme-row details{margin:.5rem 0}
.mpl-theme-row summary{cursor:pointer;user-select:none}
.mpl-theme-row input[type="color"],
.mpl-theme-row input[type="range"],
.mpl-theme-row input[type="checkbox"],
.mpl-theme-row button{margin:.25rem .5rem .25rem 0}
.mpl-theme-row label{margin-right:.25rem}
.mpl-theme-muted{opacity:.8}
</style>


<script id="mpl-theme-auto-js-v3">
/* Auto theme (day/night by local time) + footer UI + persistence (mpl.theme.v2) */
(() => {
  const KEY='mpl.theme.v2';
  const DAY_START=7, DAY_END=19; // 07:00 inclusive -> 19:00 exclusive

  const state = (()=> {
    try{ return Object.assign({auto:true,color:null,brightness:1}, JSON.parse(localStorage.getItem(KEY) || '{}')); }
    catch{ return {auto:true,color:null,brightness:1}; }
  })();

  function hexToRgb(hex){
    if (!hex) return {r:255,g:255,b:255};
    const m = hex.replace('#','').match(/^([0-9a-f]{3}|[0-9a-f]{6})$/i);
    if(!m) return {r:255,g:255,b:255};
    let v = m[1];
    if (v.length===3) v = v.split('').map(ch=>ch+ch).join('');
    const num = parseInt(v,16);
    return {r:(num>>16)&255,g:(num>>8)&255,b:num&255};
  }
  function luminance({r,g,b}){ // sRGB -> relative luminance
    const srgb = [r,g,b].map(c=>{ c/=255; return c<=0.03928? c/12.92 : Math.pow((c+0.055)/1.055,2.4); });
    return 0.2126*srgb[0]+0.7152*srgb[1]+0.0722*srgb[2];
  }
  function derivePalette(baseHex){
    const rgb = hexToRgb(baseHex);
    const L = luminance(rgb);
    const fg = (1 - L) > 0.45 ? '#ffffff' : '#111111'; // ensure contrast-ish
    const muted = (L > 0.5) ? '#6b7280' : '#9ca3af';
    const border = (L > 0.5) ? 'rgba(0,0,0,0.12)' : 'rgba(255,255,255,0.18)';
    return {bg: baseHex, fg, muted, b: border};
  }

  function isDay(){
    const h = new Date().getHours();
    return (h >= DAY_START && h < DAY_END);
  }

  function applyTheme(){
    const root = document.documentElement;
    let bg, fg, muted, b;
    let brightness = Number(state.brightness || 1) || 1;

    if (state.auto){
      const day = isDay();
      const dayBg = '#f7f7fb', nightBg = '#0b0b10';
      const pal = derivePalette(day ? dayBg : nightBg);
      bg = pal.bg; fg = pal.fg; muted = pal.muted; b = pal.b;
      root.dataset.mplTheme = day ? 'day-auto' : 'night-auto';
    } else {
      const base = state.color || '#f7f7fb';
      const pal = derivePalette(base);
      bg = pal.bg; fg = pal.fg; muted = pal.muted; b = pal.b;
      delete root.dataset.mplTheme;
    }

    root.style.setProperty('--bg', bg);
    root.style.setProperty('--fg', fg);
    root.style.setProperty('--muted', muted);
    root.style.setProperty('--b', b);
    root.style.setProperty('--brightness', String(brightness));
  }

  function save(){ try{ localStorage.setItem(KEY, JSON.stringify(state)); }catch{} }

  function ensureFooter(){
    let footer = document.querySelector('#footer2025, .footer-2025, footer');
    if (!footer) { footer = document.createElement('footer'); document.body.appendChild(footer); }
    let row = footer.querySelector('.mpl-theme-row');
    if (row) return row;

    row = document.createElement('div');
    row.className = 'mpl-theme-row';
    const details = document.createElement('details');
    details.open = false;
    const summary = document.createElement('summary');
    summary.textContent = 'Theme';
    details.appendChild(summary);

    const form = document.createElement('div');

    // Auto toggle
    const autoId = 'mpl-theme-auto';
    const autoLabel = document.createElement('label');
    autoLabel.setAttribute('for', autoId);
    autoLabel.textContent = 'Auto';
    const auto = document.createElement('input');
    auto.type = 'checkbox'; auto.id = autoId;

    // Color picker
    const colorId = 'mpl-theme-color';
    const colorLabel = document.createElement('label');
    colorLabel.setAttribute('for', colorId);
    colorLabel.textContent = 'Color';
    const color = document.createElement('input');
    color.type = 'color'; color.id = colorId; color.value = state.color || '#f7f7fb';

    // Brightness
    const rangeId = 'mpl-theme-brightness';
    const rangeLabel = document.createElement('label');
    rangeLabel.setAttribute('for', rangeId);
    rangeLabel.textContent = 'Brightness';
    const range = document.createElement('input');
    range.type = 'range'; range.min = '0.85'; range.max = '1.25'; range.step = '0.01'; range.id = rangeId; range.value = String(state.brightness || 1);

    // Reset
    const reset = document.createElement('button');
    reset.type = 'button'; reset.textContent = 'Reset';

    form.append(autoLabel, auto, colorLabel, color, rangeLabel, range, reset);
    details.appendChild(form);
    row.appendChild(details);
    footer.appendChild(row);

    // wire events
    function reflectControls(){
      auto.checked = !!state.auto;
      color.disabled = !!state.auto;
      range.disabled = !!state.auto;
      if (!state.color) color.value = '#f7f7fb';
    }
    reflectControls();

    auto.addEventListener('change', ()=>{
      state.auto = auto.checked;
      if (state.auto){
        save(); applyTheme(); reflectControls();
      } else { save(); applyTheme(); reflectControls(); }
    });

    color.addEventListener('input', ()=>{
      if (state.auto) return;
      state.color = color.value;
      save(); applyTheme();
    });

    range.addEventListener('input', ()=>{
      if (state.auto) return;
      state.brightness = Number(range.value);
      save(); applyTheme();
    });

    reset.addEventListener('click', ()=>{
      state.auto = true; state.color = null; state.brightness = 1;
      save(); applyTheme(); reflectControls();
    });

    return row;
  }

  function scheduleMinuteTicks(){
    if (!state.auto) return;
    const now = new Date();
    const msToNextMinute = (60 - now.getSeconds())*1000 - now.getMilliseconds();
    setTimeout(()=> {
      applyTheme();
      setInterval(()=>{ if (state.auto) applyTheme(); }, 60000);
    }, Math.max(0, msToNextMinute));
  }

  function init(){
    applyTheme();
    ensureFooter();
    scheduleMinuteTicks();
  }

  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', init);
  else init();
})();
</script>


<script id="mpl-footer-menu-js-v3">
/* Footer "Explore" — mirror desktop top-level nav into collapsible footer sections */
(() => {
  const q = (sel, ctx=document) => Array.from(ctx.querySelectorAll(sel));
  function findSubmenu(el){
    return el.querySelector(':scope > .submenu, :scope > [role="menu"], :scope > ul, :scope > .dropdown-menu, :scope > ol');
  }
  function topNavGroups(){
    const navs = q('header nav, nav[role="navigation"], nav.primary, .navbar nav, nav');
    const groups = new Set();
    navs.forEach(nav=>{
      const ul = nav.querySelector(':scope > ul');
      const kids = ul ? Array.from(ul.children) : Array.from(nav.children);
      kids.forEach(node => { const sub = findSubmenu(node); if (sub) groups.add(node); });
    });
    return Array.from(groups);
  }
  function ensureFooterRoot(){
    let footer = document.querySelector('#footer2025, .footer-2025, footer');
    if (!footer) { footer = document.createElement('footer'); document.body.appendChild(footer); }
    return footer;
  }
  function structuredFooterExists(footer){
    // Heuristic: existing list-heavy footer with at least 2 headings and link lists
    const hasLists = footer.querySelectorAll('ul li a, nav a').length >= 8;
    const hasHeadings = footer.querySelectorAll('h2, h3, h4').length >= 2;
    return hasLists && hasHeadings;
  }

  function buildExplore(){
    const footer = ensureFooterRoot();
    if (footer.querySelector('.mpl-footer-explore')) return; // already built

    if (structuredFooterExists(footer)) {
      // Enhance: add chevron toggles to existing sections with lists
      const sections = q('section, .column, .col, .links, nav, .footer-group', footer).filter(s=> s.querySelector('ul, ol'));
      sections.forEach((sec, idx)=>{
        let heading = sec.querySelector('h2, h3, h4, summary');
        if (!heading) return;
        // wrap heading text with a toggle button
        if (!sec.querySelector(':scope > .mpl-footer-toggle')){
          const btn = document.createElement('button');
          btn.className = 'mpl-footer-toggle';
          btn.type = 'button';
          btn.setAttribute('aria-expanded','false');
          btn.innerHTML = heading.textContent + ' <span aria-hidden="true">▾</span>';
          heading.replaceWith(btn);
          const list = sec.querySelector('ul, ol') || document.createElement('div');
          list.setAttribute('data-mpl-footer-list','');
          list.style.display = 'none';
          const onToggle = ()=>{
            const open = btn.getAttribute('aria-expanded')==='true';
            q('.mpl-footer-toggle[aria-expanded="true"]', footer).forEach(b=>{
              if (b!==btn){ b.setAttribute('aria-expanded','false'); const l = b.nextElementSibling; if(l) l.style.display = 'none'; }
            });
            btn.setAttribute('aria-expanded', String(!open));
            list.style.display = open ? 'none' : '';
          };
          btn.addEventListener('click', onToggle);
          btn.addEventListener('keydown', (e)=>{ if (e.key==='Enter' || e.key===' ') { e.preventDefault(); onToggle(); } if (e.key==='Escape'){ btn.setAttribute('aria-expanded','false'); list.style.display='none'; btn.focus(); }});
        }
      });
      return;
    }

    // Build mirrored Explore menu
    const container = document.createElement('nav');
    container.className = 'mpl-footer-explore';
    const title = document.createElement('h2');
    title.textContent = 'Explore';
    container.appendChild(title);

    const groups = topNavGroups();
    groups.forEach((g, idx)=>{
      const section = document.createElement('section');
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.className = 'mpl-footer-toggle';
      btn.setAttribute('aria-expanded','false');

      // label text
      let labelNode = g.querySelector(':scope > a, :scope > button, :scope > [role="button"], :scope > .label, :scope > .menu-label');
      const labelText = (labelNode && (labelNode.textContent||'').trim()) || ('Menu ' + (idx + 1));
      btn.innerHTML = labelText + ' <span aria-hidden="true">▾</span>';

      // items
      const list = document.createElement('ul');
      const submenu = findSubmenu(g);
      if (submenu){
        const links = q('a[href], [data-href]', submenu);
        links.forEach(a=>{
          const li = document.createElement('li');
          const href = a.getAttribute('href') || a.getAttribute('data-href') || '#';
          const text = (a.textContent||'').trim() || href;
          const cl = document.createElement('a'); cl.href = href; cl.textContent = text;
          li.appendChild(cl); list.appendChild(li);
        });
      }
      list.setAttribute('data-mpl-footer-list','');
      list.style.display = 'none';

      const onToggle = ()=>{
        const open = btn.getAttribute('aria-expanded')==='true';
        q('.mpl-footer-toggle[aria-expanded="true"]', container).forEach(b=>{
          if (b!==btn){ b.setAttribute('aria-expanded','false'); const l = b.nextElementSibling; if(l) l.style.display = 'none'; }
        });
        btn.setAttribute('aria-expanded', String(!open));
        list.style.display = open ? 'none' : '';
      };
      btn.addEventListener('click', onToggle);
      btn.addEventListener('keydown', (e)=>{ if (e.key==='Enter' || e.key===' ') { e.preventDefault(); onToggle(); } if (e.key==='Escape'){ btn.setAttribute('aria-expanded','false'); list.style.display='none'; btn.focus(); }});

      section.appendChild(btn);
      section.appendChild(list);
      container.appendChild(section);
    });

    ensureFooterRoot().appendChild(container);
  }

  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', buildExplore);
  else buildExplore();
})();
</script>
