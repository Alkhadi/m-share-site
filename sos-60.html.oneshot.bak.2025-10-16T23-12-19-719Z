<!doctype html>
<html class="gpt5-typography" lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover" />
    <title>60-second SOS • M Share</title>
    <meta name="theme-color" content="#2a0b12" />
    <link rel="stylesheet" href="style.css" />
    <link rel="stylesheet" href="assets/css/nav-footer-uni.css" />
<style>
        .wrap {
            max-width: 980px;
            margin: 0 auto
        }

        .ui {
            background: rgba(255, 255, 255, .05);
            border: 1px solid var(--b);
            border-radius: 16px;
            box-shadow: var(--shadow-1);
            padding: 16px
        }

        .session {
            display: grid;
            place-items: center;
            gap: 18px;
            text-align: center
        }

        .orb-wrap {
            position: relative;
            width: min(84vw, 380px);
            aspect-ratio: 1/1
        }

        .orb {
            position: absolute;
            inset: 0;
            display: grid;
            place-items: center;
            border-radius: 50%;
            background: radial-gradient(120px 180px at 30% 30%, rgba(255, 255, 255, .15), transparent 55%),
                radial-gradient(100px 100px at 70% 70%, rgba(255, 255, 255, .08), transparent 70%),
                linear-gradient(180deg, rgba(255, 210, 210, .22), rgba(170, 80, 80, .16));
            box-shadow: inset 0 0 40px rgba(0, 0, 0, .25), 0 30px 50px rgba(0, 0, 0, .35);
            border: 1px solid rgba(255, 255, 255, .14);
            transform: scale(.82);
            transition: transform 280ms cubic-bezier(.22, .8, .24, 1)
        }

        .orb.inhale {
            transform: scale(1.08)
        }

        .orb.exhale {
            transform: scale(.78)
        }

        .phase {
            font-weight: 800;
            font-size: clamp(22px, 3.2vw, 28px)
        }

        .count {
            font-weight: 900;
            font-size: clamp(48px, 7.5vw, 56px);
            line-height: 1;
            margin-top: 4px;
            text-shadow: 0 6px 22px rgba(0, 0, 0, .35)
        }

        .mini {
            margin-top: 6px;
            font-size: 13px;
            color: var(--muted)
        }

        svg.radial {
            position: absolute;
            inset: 0;
            transform: rotate(-90deg)
        }

        .ring {
            fill: none;
            stroke-width: 8;
            stroke-linecap: round
        }

        .ring.base {
            stroke: rgba(255, 255, 255, .08)
        }

        .ring.progress {
            stroke: rgba(255, 180, 180, .9)
        }

        body.focus-mode header.site-header,
        .stage-nav,
        .footer {
            display: none !important
        }

        body.focus-mode main .card.setup,
        body.focus-mode #done {
            display: none !important
        }

        .btn-row {
            display: flex;
            gap: 8px;
            flex-wrap: wrap
        }

        .kv3 {
            display: grid;
            grid-template-columns: repeat(3, minmax(0, 1fr));
            gap: 10px
        }

        @media(max-width:760px) {
            .kv3 {
                grid-template-columns: 1fr
            }
        }

        .hint {
            font-size: .9rem;
            color: var(--muted)
        }
    </style>
<link rel="icon" type="image/png" sizes="32x32" href="icons/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="icons/favicon-16x16.png" />
<link rel="apple-touch-icon" href="icons/apple-touch-icon.png" />
<link rel="manifest" href="manifest.webmanifest" />
  <link rel="stylesheet" href="assets/css/nav-unified.css">
  <link rel="stylesheet" href="assets/css/voice-coach-pro.css">
  <link rel="stylesheet" href="voice-coach-fix.css">

<style id="mpl-mobile-nav-style-v4">
  /* Ensure [hidden] truly hides dropdowns in any theme */
  nav .menu[hidden], nav .submenu[hidden] { display:none !important; }

  /* Small/medium behavior only */
  @media (max-width: 1024px) {
    /* Collapsible whole nav */
    #mainNav[hidden] { display: none !important; }
    /* Group baseline */
    .nav-group, .menu-group { position: relative; }
    /* When marked open, reveal child menu block / list */
    .nav-group.open > .menu,
    .menu-group.open > .submenu { display:block; }

    /* Clickable targets (chevrons/toggles) */
    .nav-group > .menu-toggle,
    .nav-group > .chevron,
    .nav-group [data-chevron],
    .menu-group > .menu-toggle,
    .menu-group > .chevron,
    .menu-group [data-chevron] { cursor:pointer; touch-action: manipulation; }

    /* A11y focus rings on triggers */
    .nav-group > a:focus,
    .nav-group > button:focus,
    .nav-group > .menu-toggle:focus,
    .nav-group > .chevron:focus,
    .menu-group > a:focus,
    .menu-group > button:focus,
    .menu-group > .menu-toggle:focus,
    .menu-group > .chevron:focus { outline:2px solid currentColor; outline-offset:2px; }
  }

  /* Hamburger is hidden on desktop */
  @media (min-width: 1025px) { #navToggle{ display:none !important; } }
</style>

<style id="mpl-desktop-nav-css-v3">
/* Desktop-only navigation helpers (visibility + a11y) */
@media (min-width:1025px){
  .mpl-nav-toggle{display:inline-flex;align-items:center;gap:.25rem;background:none;border:0;padding:.25rem;margin-left:.25rem;cursor:pointer;line-height:1}
  .mpl-nav-toggle:focus,.mpl-nav-toggle:focus-visible{outline:2px solid currentColor;outline-offset:2px}
  [data-mpl-submenu]{display:none;visibility:hidden}
  [data-mpl-open="true"] > [data-mpl-submenu]{display:block;visibility:visible}
  .mpl-chevron{display:inline-block;transform:rotate(0deg);transition:transform .2s ease}
  [data-mpl-open="true"] .mpl-chevron{transform:rotate(180deg)}
  .mpl-sr-only{position:absolute!important;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}
}
</style>

<script id="mpl-desktop-nav-js-v3">
/* Desktop submenu behavior — hover or click, one open, ESC/Outside close, a11y */
(() => {
  const mq = window.matchMedia('(min-width:1025px)');
  let enabled = false;
  let cleanups = [];
  const q = (sel, ctx=document) => Array.from(ctx.querySelectorAll(sel));

  function findSubmenu(el){
    return el.querySelector(':scope > .submenu, :scope > [role="menu"], :scope > ul, :scope > .dropdown-menu, :scope > ol');
  }

  function findTopNavGroups(){
    const navs = q('header nav, nav[role="navigation"], nav.primary, .navbar nav, nav');
    const groups = new Set();
    navs.forEach(nav => {
      const topChildren = [];
      const ul = nav.querySelector(':scope > ul');
      if (ul) topChildren.push(...Array.from(ul.children));
      else topChildren.push(...Array.from(nav.children));
      topChildren.forEach(node => {
        const sub = findSubmenu(node);
        if (sub) groups.add(node);
      });
    });
    return Array.from(groups);
  }

  function closeAll(except){
    q('[data-mpl-open="true"]').forEach(g=>{
      if (except && g === except) return;
      g.setAttribute('data-mpl-open','false');
      const t = g.querySelector(':scope > .mpl-nav-toggle');
      if (t) t.setAttribute('aria-expanded','false');
    });
  }

  function enhance(){
    if (enabled) return;
    enabled = true;

    const groups = findTopNavGroups();
    if (!groups.length) return;

    groups.forEach(group=>{
      const submenu = findSubmenu(group);
      if (!submenu) return;
      submenu.setAttribute('data-mpl-submenu','true');
      group.setAttribute('data-mpl-nav-group','true');
      if (!group.hasAttribute('data-mpl-open')) group.setAttribute('data-mpl-open','false');

      // Label is the first focusable/control on the group (but outside submenu)
      let label = group.querySelector(':scope > a, :scope > button, :scope > [role="button"], :scope > .label, :scope > .menu-label');
      if (!label) label = group.firstElementChild;

      // Toggle button (desktop-only)
      let toggle = group.querySelector(':scope > .mpl-nav-toggle');
      if (!toggle) {
        toggle = document.createElement('button');
        toggle.type = 'button';
        toggle.className = 'mpl-nav-toggle';
        toggle.setAttribute('aria-haspopup','menu');
        toggle.setAttribute('aria-expanded','false');
        toggle.setAttribute('title','Toggle submenu');
        toggle.innerHTML = '<span class="mpl-chevron" aria-hidden="true">▾</span><span class="mpl-sr-only">Toggle submenu</span>';
        if (label && label.nextSibling) group.insertBefore(toggle, label.nextSibling);
        else group.appendChild(toggle);
      }

      const open = () => {
        if (!mq.matches) return;
        closeAll(group);
        group.setAttribute('data-mpl-open','true');
        toggle.setAttribute('aria-expanded','true');
      };
      const close = () => {
        if (!mq.matches) return;
        group.setAttribute('data-mpl-open','false');
        toggle.setAttribute('aria-expanded','false');
      };

      const onEnter = () => open();
      const onLeave = (e) => {
        // close only when leaving group entirely
        const rel = e.relatedTarget;
        if (rel && group.contains(rel)) return;
        close();
      };
      const onToggle = (e) => {
        if (!mq.matches) return;
        e.preventDefault();
        const isOpen = group.getAttribute('data-mpl-open') === 'true';
        if (isOpen) close(); else open();
      };
      const onKeys = (e) => {
        if (!mq.matches) return;
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onToggle(e); }
        else if (e.key === 'Escape') { e.preventDefault(); close(); toggle.focus(); }
      };

      group.addEventListener('mouseenter', onEnter);
      group.addEventListener('mouseleave', onLeave);
      toggle.addEventListener('click', onToggle);
      toggle.addEventListener('keydown', onKeys);

      cleanups.push(()=> {
        group.removeEventListener('mouseenter', onEnter);
        group.removeEventListener('mouseleave', onLeave);
        toggle.removeEventListener('click', onToggle);
        toggle.removeEventListener('keydown', onKeys);
      });
    });

    const onDocClick = (e) => {
      if (!mq.matches) return;
      const openEl = document.querySelector('[data-mpl-open="true"]');
      if (!openEl) return;
      if (openEl.contains(e.target)) return;
      openEl.setAttribute('data-mpl-open','false');
      const t = openEl.querySelector(':scope > .mpl-nav-toggle');
      if (t) t.setAttribute('aria-expanded','false');
    };
    const onDocEsc = (e) => {
      if (!mq.matches) return;
      if (e.key === 'Escape') {
        const openEl = document.querySelector('[data-mpl-open="true"]');
        if (!openEl) return;
        openEl.setAttribute('data-mpl-open','false');
        const t = openEl.querySelector(':scope > .mpl-nav-toggle');
        if (t) { t.setAttribute('aria-expanded','false'); t.focus(); }
      }
    };
    document.addEventListener('click', onDocClick);
    document.addEventListener('keydown', onDocEsc);
    cleanups.push(()=>{ document.removeEventListener('click', onDocClick); document.removeEventListener('keydown', onDocEsc); });
  }

  function teardown(){
    if (!enabled) return;
    closeAll();
    cleanups.forEach(fn => { try { fn(); } catch(_){} });
    cleanups = [];
    enabled = false;
  }

  const react = () => { mq.matches ? enhance() : teardown(); };
  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', react);
  else react();
  mq.addEventListener('change', react);
})();
</script>

<style id="mpl-footer-css-v3">
/* Scoped footer styles (safe, minimal) */
#footer2025.mpl-footer-v3{border-top:1px solid var(--b,rgba(0,0,0,.12));font:inherit}
#footer2025.mpl-footer-v3 .mpl-footer-wrap{max-width:min(1220px,96vw);margin:0 auto;padding:20px 12px}
#footer2025.mpl-footer-v3 .mpl-footer-grid{display:grid;grid-template-columns:1fr 1fr 1fr;gap:20px;align-items:start}
#footer2025.mpl-footer-v3 .brandline{display:flex;align-items:center;gap:.65rem}
#footer2025.mpl-footer-v3 .brandline .logo{display:inline-grid;place-items:center;width:28px;height:28px;border-radius:6px;background:currentColor;color:#fff;font-weight:700}
#footer2025.mpl-footer-v3 .muted{color:var(--muted,#6b7280)}
#footer2025.mpl-footer-v3 .mpl-pay{display:flex;flex-wrap:wrap;gap:.5rem;margin-top:.5rem}
#footer2025.mpl-footer-v3 .mpl-pay a{display:inline-flex;align-items:center;gap:.35rem;padding:.35rem .55rem;border:1px solid var(--b,rgba(0,0,0,.12));border-radius:.4rem;text-decoration:none}
#footer2025.mpl-footer-v3 .mpl-pay a:focus{outline:2px solid currentColor;outline-offset:2px}
#footer2025.mpl-footer-v3 .mpl-theme-host details{border:1px solid var(--b,rgba(0,0,0,.12));border-radius:.5rem;padding:.35rem .5rem}
#footer2025.mpl-footer-v3 .mpl-theme-host summary{cursor:pointer;user-select:none}
#footer2025.mpl-footer-v3 .mpl-theme-host label{margin-right:.25rem}
#footer2025.mpl-footer-v3 .mpl-theme-host input{margin:.25rem .5rem .25rem 0}
#footer2025.mpl-footer-v3 .mpl-footer-explore h4{margin:0 0 .25rem 0}
#footer2025.mpl-footer-v3 .mpl-footer-explore section{margin:.25rem 0}
#footer2025.mpl-footer-v3 .mpl-footer-toggle{display:flex;justify-content:space-between;align-items:center;width:100%;background:transparent;border:1px solid var(--b,rgba(0,0,0,.12));padding:.4rem .6rem;border-radius:.4rem;cursor:pointer}
#footer2025.mpl-footer-v3 .mpl-footer-toggle:focus{outline:2px solid currentColor;outline-offset:2px}
#footer2025.mpl-footer-v3 [data-mpl-footer-list]{margin:.35rem 0 0 0;padding-left:1rem}
#footer2025.mpl-footer-v3 [data-mpl-footer-list] li{margin:.2rem 0}
#footer2025.mpl-footer-v3 .bottom{display:flex;justify-content:space-between;gap:1rem;margin-top:16px;padding-top:12px;border-top:1px solid var(--b,rgba(0,0,0,.12))}
@media (max-width:900px){
  #footer2025.mpl-footer-v3 .mpl-footer-grid{grid-template-columns:1fr}
  #footer2025.mpl-footer-v3 .bottom{flex-direction:column}
}
</style>
<style id="mpl-theme-vars-css-v3">
:root{
  --bg:#f7f7fb; --fg:#111111; --muted:#6b7280; --b:rgba(0,0,0,.12); --brightness:1;
  color-scheme: light dark;
}
html{background:var(--bg);color:var(--fg);filter:brightness(var(--brightness));}
body{background:transparent}
</style>
  <link rel="stylesheet" href="assets/css/chatgpt5-typography.css">
        <link rel="stylesheet" href="assets/css/footer-2025.css">
              <link rel="stylesheet" href="assets/css/nav-contrast-fix.css">
  <link rel="stylesheet" href="assets/css/readability-contrast.css">
  <link rel="stylesheet" href="assets/css/readability-professional.css">
</head>

<body>
    <header class="site-header">
    <div class="container navbar">
      <a id="brandLink" class="brand" data-href="index.html" href="index.html"><span class="logo">M</span> <span
          class="brand-text">M Share</span></a>

      <nav class="main-nav" id="mainNav">
        <a data-href="index.html">Wellbeing</a>
        <div class="menu-group">
          <button class="menu-toggle" aria-expanded="false">Conditions <span class="icon">▾</span></button>
          <div class="submenu">
            <div class="menu-label">Neurodevelopmental</div>
            <a data-href="autism.html">Autism</a>
            <a data-href="adhd.html">ADHD</a>
            <a data-href="dyslexia-reading-training.html">Dyslexia</a>
            <div class="menu-label">Mental Health</div>
            <a data-href="anxiety.html">Anxiety</a>
            <a data-href="depression.html">Depression</a>
            <a data-href="stress.html">Stress</a>
            <a data-href="sleep.html">Sleep</a>
          </div>
        </div>
        <div class="menu-group">
          <button class="menu-toggle" aria-expanded="false">Breathing &amp; Focus <span class="icon">▾</span></button>
          <div class="submenu">
            <div class="menu-label">Guides</div>
            <a data-href="breath.html">Breath (how-to)</a>
            <a data-href="focus.html">Focus</a>
            <a data-href="mindfulness.html">Mindfulness</a>
            <div class="menu-label">Techniques</div>
            <a data-href="sos-60.html">60-second Reset</a>
            <a data-href="box-breathing.html">Box Breathing</a>
            <a data-href="4-7-8-breathing.html">4-7-8 Breathing</a>
            <a data-href="coherent-5-5.html">Coherent 5-5</a>
          </div>
        </div>
        <div class="menu-group">
          <button class="menu-toggle" aria-expanded="false">Toolkits <span class="icon">▾</span></button>
          <div class="submenu">
            <div class="menu-label">General</div>
            <a data-href="sleep-tools.html">Sleep Tools</a>
            <a data-href="breath-tools.html">Breath Tools</a>
            <a data-href="mood-tools.html">Mood Tools</a>
            <div class="menu-label">Condition-specific</div>
            <a data-href="adhd-tools.html">ADHD Tools</a>
            <a data-href="autism-tools.html">Autism Tools</a>
            <a data-href="depression-tools.html">Depression Tools</a>
            <a data-href="anxiety-tools.html">Anxiety Tools</a>
            <a data-href="stress-tools.html">Stress Tools</a>
          </div>
        </div>
        <div class="menu-group">
          <button class="menu-toggle" aria-expanded="false">About <span class="icon">▾</span></button>
          <div class="submenu">
            <a data-href="about.html">About</a>
            <a data-href="coffee.html">Support Us</a>
            <a data-href="contact.html">Contact</a>
          </div>
        </div>
      </nav>

      <button id="navToggle" class="nav-toggle" aria-label="Menu" aria-expanded="false"
        aria-controls="mainNav">☰</button>
    </div>
  </header>

    <main class="container wrap">
        <div class="card setup">
            <h1>60-second SOS — Setup</h1>
            <p class="muted">One-minute reset: gentle <b>inhale 4</b> → <b>exhale 4</b> to calm.</p>

            <div class="grid cols-2">
                <div class="tile"><label>Inhale (s)</label><input id="inS" type="number" min="1" max="20" value="4" />
                </div>
                <div class="tile"><label>Hold (s)</label><input id="h1S" type="number" min="0" max="20" value="0" />
                </div>
                <div class="tile"><label>Exhale (s)</label><input id="outS" type="number" min="1" max="30" value="4" />
                </div>
                <div class="tile"><label>Hold (after exhale) (s)</label><input id="h2S" type="number" min="0" max="20"
                        value="0" /></div>
            </div>

            <h2 style="margin-top:10px">Quick Session</h2>
            <div class="btn-row">
                <select id="qsPreset" title="Preset">
                    <option value="4,0,4,0,1,6.0,on,cosmic,0.22,auto,on">1 min reset · TTS on</option>
                    <option value="4,0,4,0,3,6.0,off,rain,0.24,auto,on">3 min · rain</option>
                    <option value="4,0,6,0,1,5.0,off,cosmic,0.20,auto,on">1 min · longer exhale</option>
                </select>
                <button id="qsStart" class="btn btn-success" type="button">▶ Start</button>
                <button id="qsStop" class="btn" type="button">■ Stop</button>
            </div>

            <div class="grid cols-2 ui" style="margin:10px 0">
                <div class="kv3">
                    <div class="tile"><label>Minutes</label>
                        <select id="minutes">
                            <option value="1" selected>1 minute</option>
                            <option value="3">3 minutes</option>
                            <option value="5">5 minutes</option>
                        </select>
                    </div>
                    <div class="tile"><label>Breaths/min</label><input id="bpm" type="number" min="4" max="8" step="0.1"
                            value="6.0" /></div>
                    <div class="tile"><label>Voice coach (TTS)</label>
                        <select id="tts">
                            <option value="off">Off</option>
                            <option value="on" selected>On</option>
                        </select>
                    </div>
                    <div class="tile"><label>Haptics</label>
                        <select id="vib">
                            <option value="off">Off</option>
                            <option value="on" selected>On</option>
                        </select>
                    </div>
                    <div class="tile"><label>Ambience</label>
                        <select id="bg">
                            <option value="none">None</option>
                            <option value="cosmic" selected>Cosmic Waves</option>
                            <option value="rain">Soft Rain</option>
                        </select>
                    </div>
                    <div class="tile"><label>Ambience volume</label><input id="bgv" type="range" min="0" max="1"
                            step="0.01" value="0.22" /></div>
                    <div class="tile"><label>Reduced motion</label>
                        <select id="rm">
                            <option value="auto" selected>Auto</option>
                            <option value="on">Force reduce</option>
                            <option value="off">Full motion</option>
                        </select>
                    </div>
                    <div class="tile"><label>Focus mode</label>
                        <select id="focus">
                            <option value="off">Off</option>
                            <option value="on" selected>On</option>
                        </select>
                    </div>
                </div>
                <div class="tile hint">Tip: Keep it soft and effortless. Tap orb or press <b>Space</b> to pause/resume.
                </div>
            </div>

            <div class="btn-row">
                <button class="btn btn-success" id="startBtn" type="button">Start</button>
                <button class="btn" id="instBtn" type="button">Instructions</button>
                <button class="btn" id="resetBtn" type="button">Stop</button>
            </div>
        </div>

        <div id="inst" class="card hidden">
            <h2>How to Practice</h2>
            <ol>
                <li>Ground your feet; soften jaw and brow.</li>
                <li>In 4 seconds through the nose; out 4 seconds through the mouth.</li>
                <li>One minute is enough to reset. Repeat if needed.</li>
            </ol>
            <div class="btn-row">
                <button class="btn btn-success" id="beginFromInst" type="button">Begin Session</button>
                <button class="btn" id="backSetup" type="button">Back to Setup</button>
            </div>
        </div>

        <div id="session" class="card session hidden">
            <h2>Session</h2>
            <div class="orb-wrap" id="tapArea" aria-live="polite" aria-atomic="true" title="Tap to pause/resume">
                <svg class="radial" viewBox="0 0 100 100" aria-hidden="true">
                    <circle class="ring base" cx="50" cy="50" r="42"></circle>
                    <circle id="progressRing" class="ring progress" cx="50" cy="50" r="42" stroke-dasharray="264"
                        stroke-dashoffset="264"></circle>
                </svg>
                <div id="orb" class="orb inhale">
                    <div>
                        <div id="phase" class="phase">Inhale</div>
                        <div id="count" class="count">4</div>
                        <div class="mini"><span id="idx">1</span>/<span id="total">0</span> breaths</div>
                    </div>
                </div>
            </div>
            <div class="btn-row">
                <button class="btn" id="pauseBtn" type="button">Pause</button>
                <button class="btn" id="adjustBtn" type="button">Adjust Settings</button>
                <button class="btn" id="hardStopBtn" type="button">Stop</button>
            </div>
        </div>

        <div id="done" class="card hidden">
            <h2>Session Complete</h2>
            <div class="grid cols-3">
                <div class="tile"><label>Total Minutes</label>
                    <div id="doneMin" class="val">0</div>
                </div>
                <div class="tile"><label>Day Streak</label>
                    <div id="doneStreak" class="val">0</div>
                </div>
                <div class="tile"><label>Total Breaths</label>
                    <div id="doneBreaths" class="val">0</div>
                </div>
            </div>
            <div class="btn-row">
                <button class="btn btn-success" id="againBtn" type="button">Again</button>
                <a class="btn" data-href="index.html" href="index.html">Back to Hub</a>
            </div>
        </div>
    </main>

    <script>
        (function () {
            'use strict';
            const $ = id => document.getElementById(id);

            const inS = $('inS'), h1S = $('h1S'), outS = $('outS'), h2S = $('h2S');
            const minutes = $('minutes'), bpm = $('bpm'), tts = $('tts'), vib = $('vib'), bg = $('bg'), bgv = $('bgv'), rm = $('rm'), focus = $('focus');
            const qsPreset = $('qsPreset'), qsStart = $('qsStart'), qsStop = $('qsStop');

            const ring = $('progressRing'), orb = $('orb'), phaseEl = $('phase'), countEl = $('count'), idxEl = $('idx'), totalEl = $('total');
            const CIRC = 264; const setProgress = p => { ring.style.strokeDashoffset = String(CIRC * (1 - Math.max(0, Math.min(1, p)))) };

            let ac = null; function ensureAC() { if (!ac) ac = new (window.AudioContext || window.webkitAudioContext)(); if (ac.state === 'suspended') ac.resume(); }
            function chime(vol = .24) {
                if (!ac) return; const g = ac.createGain(); g.gain.value = 0; const o = ac.createOscillator(); o.type = 'sine'; o.frequency.value = 528;
                g.gain.setValueAtTime(0, ac.currentTime); g.gain.linearRampToValueAtTime(vol, ac.currentTime + .01); g.gain.exponentialRampToValueAtTime(.0001, ac.currentTime + 1.15);
                o.connect(g); g.connect(ac.destination); o.start(); o.stop(ac.currentTime + 1.2);
            }
            function Background(ac) {
                const master = ac.createGain(); master.gain.value = parseFloat(bgv.value || 0.22); master.connect(ac.destination);
                let nodes = []; const clear = () => { nodes.forEach(n => { try { n.stop?.(); n.disconnect?.(); } catch { } }); nodes = []; };
                const cosmic = () => {
                    const g = ac.createGain(); g.gain.value = .12; g.connect(master); const o1 = ac.createOscillator(), o2 = ac.createOscillator();
                    o1.type = 'sine'; o1.frequency.value = 110; o2.type = 'sine'; o2.frequency.value = 220;
                    const l = ac.createOscillator(), lg = ac.createGain(); l.type = 'sine'; l.frequency.value = .05; lg.gain.value = 15; l.connect(lg); lg.connect(o1.frequency);
                    o1.connect(g); o2.connect(g);[o1, o2, l].forEach(n => n.start()); nodes.push(o1, o2, l, g);
                };
                const rain = () => {
                    const buf = ac.createBuffer(1, ac.sampleRate * 2, ac.sampleRate); const d = buf.getChannelData(0);
                    for (let i = 0; i < d.length; i++) d[i] = (Math.random() * 2 - 1) * .55;
                    const src = ac.createBufferSource(); src.buffer = buf; src.loop = true;
                    const lp = ac.createBiquadFilter(); lp.type = 'lowpass'; lp.frequency.value = 1200;
                    const g = ac.createGain(); g.gain.value = .2; src.connect(lp).connect(g).connect(master); src.start(); nodes.push(src, lp, g);
                };
                this.setType = t => { clear(); if (t === 'cosmic') cosmic(); else if (t === 'rain') rain(); };
                this.setVol = v => master.gain.setTargetAtTime(parseFloat(v || 0.22), ac.currentTime, .1);
                this.stop = () => clear();
            }
            let bgm = null;

            function speak(text) { if (tts.value !== 'on') return; try { const u = new SpeechSynthesisUtterance(text); u.rate = 0.95; speechSynthesis.cancel(); speechSynthesis.speak(u); } catch { } }
            function vibrate(ms) { if (vib.value === 'on' && navigator.vibrate) try { navigator.vibrate(ms); } catch { } }
            function rmEnabled() { if (rm.value === 'on') return true; if (rm.value === 'off') return false; return window.matchMedia?.('(prefers-reduced-motion: reduce)').matches; }
            function applyFocus(on) { document.body.classList.toggle('focus-mode', !!on); }

            const TECH_ID = 'sos60';
            let running = false, paused = false, timer = null, breathIdx = 1, breathTotal = 0;

            function step(label, dur, next) {
                phaseEl.textContent = (label === 'in' ? 'Inhale' : label === 'h1' ? 'Hold' : label === 'out' ? 'Exhale' : 'Hold');
                orb.classList.remove('inhale', 'exhale'); orb.classList.add(label === 'out' ? 'exhale' : 'inhale');
                speak(phaseEl.textContent); vibrate(label === 'out' ? 18 : 24); chime(Math.max(.18, parseFloat(bgv.value || 0.22) * (label === 'out' ? 1.1 : 0.9)));
                const start = performance.now();
                (function raf(now) {
                    if (!running) { cancelAnimationFrame(timer); return; }
                    if (paused) { timer = requestAnimationFrame(raf); return; }
                    const elapsed = (now - start) / 1000, remain = Math.max(0, dur - elapsed);
                    countEl.textContent = String(Math.ceil(remain)); setProgress(dur ? elapsed / dur : 1);
                    if (remain <= 0) return next();
                    timer = requestAnimationFrame(raf);
                })(performance.now());
            }

            function runOne() {
                step('in', +inS.value || 4, () => step('h1', +h1S.value || 0, () => step('out', +outS.value || 4, () => {
                    breathIdx++; if (breathIdx <= breathTotal) { idxEl.textContent = String(breathIdx); runOne(); } else finish();
                })));
            }

            function startSession() {
                const mins = Math.max(1, parseInt(minutes.value || '1', 10));
                const rate = Math.min(8, Math.max(4, parseFloat(bpm.value || '6.0')));
                breathTotal = Math.max(1, Math.round(mins * rate));
                totalEl.textContent = String(breathTotal); breathIdx = 1; idxEl.textContent = '1';
                ensureAC(); if (!bgm && bg.value !== 'none') { bgm = new Background(ac); bgm.setType(bg.value); } if (bgm) bgm.setVol(bgv.value);
                running = true; paused = false; setProgress(0); applyFocus(focus.value === 'on'); document.body.classList.toggle('rm', rmEnabled());
                document.querySelector('.setup').classList.add('hidden'); $('inst').classList.add('hidden'); $('session').classList.remove('hidden');
                runOne();
            }

            function pauseSession() { if (!running) return; paused = !paused; $('pauseBtn').textContent = paused ? 'Resume' : 'Pause'; applyFocus(!paused); if (!paused) runOne(); }
            function stopToSetup() {
                running = false; paused = false; cancelAnimationFrame(timer); setProgress(0); countEl.textContent = '4'; phaseEl.textContent = 'Inhale';
                $('pauseBtn').textContent = 'Pause'; applyFocus(false); if (bgm) { bgm.stop(); bgm = null; }
                $('session').classList.add('hidden'); document.querySelector('.setup').classList.remove('hidden');
            }

            function finish() {
                running = false; cancelAnimationFrame(timer); applyFocus(false); if (bgm) { bgm.stop(); bgm = null; }
                const per = (+inS.value || 4) + (+h1S.value || 0) + (+outS.value || 4) + (+h2S.value || 0); const secs = per * breathTotal;
                const Stats = (window.__MSHARE__ || {}).Stats; const s = Stats?.addSession?.({ techId: TECH_ID, seconds: secs, breaths: breathTotal }) || null;
                $('doneMin').textContent = String(s ? Math.floor(s.totalMinutes || 0) : Math.floor(secs / 60));
                $('doneBreaths').textContent = String(s ? s.totalBreaths || 0 : breathTotal);
                $('doneStreak').textContent = String(s ? s.dayStreak || 0 : 0);
                $('done').classList.remove('hidden'); $('session').classList.add('hidden'); document.querySelector('.setup').classList.add('hidden');
            }

            $('startBtn').addEventListener('click', startSession);
            $('resetBtn').addEventListener('click', stopToSetup);
            $('instBtn').addEventListener('click', () => { document.querySelector('.setup').classList.add('hidden'); $('inst').classList.remove('hidden'); });
            $('beginFromInst').addEventListener('click', startSession);
            $('backSetup').addEventListener('click', () => { $('inst').classList.add('hidden'); document.querySelector('.setup').classList.remove('hidden'); });
            $('pauseBtn').addEventListener('click', pauseSession);
            $('hardStopBtn').addEventListener('click', stopToSetup);
            $('againBtn').addEventListener('click', () => { $('done').classList.add('hidden'); startSession(); });
            $('tapArea').addEventListener('click', pauseSession);
            document.addEventListener('keydown', e => { if (e.code === 'Space') { e.preventDefault(); pauseSession(); } });

            qsStart.addEventListener('click', () => {
                const parts = (qsPreset.value || '').split(',');
                [inS.value, h1S.value, outS.value, h2S.value] = parts.slice(0, 4);
                minutes.value = parts[4] || '1';
                bpm.value = parts[5] || '6.0';
                tts.value = parts[6] || 'on';
                bg.value = parts[7] || 'cosmic';
                bgv.value = parts[8] || '0.22';
                rm.value = parts[9] || 'auto';
                focus.value = parts[10] || 'on';
                startSession();
            });
            qsStop.addEventListener('click', stopToSetup);

            (function () {
                const q = new URLSearchParams(location.search);
                if (q.get('focus') === '1') focus.value = 'on';
                if (q.get('tts') === 'on') tts.value = 'on';
            })();
        })();
    </script><script src="assets/js/nav-core.js"></script>
<script src="assets/js/sound-kit.js"></script>
<script src="assets/js/core/nav-autofix.js"></script>
<script src="assets/js/core/nav-core.js"></script>
<script src="assets/js/core/sound-kit.js"></script>
<script src="assets/header/header.js"></script>

  <script defer src="assets/js/nav-unified.js"></script>
  <script defer src="assets/js/voice-coach-pro.js"></script>
  <script defer src="voice-coach-fix.js"></script>

<script defer src="assets/js/voice-coach-draggable.js"></script>
<script defer src="assets/js/hide-static-voicecoach.js"></script>




<script defer src="assets/js/mobile-nav-final.js"></script>
<script defer src="assets/js/footer-explore.js"></script>




<footer id="footer2025" class="footer-2025 mpl-footer-v3">
    <div class="mpl-footer-wrap">
      <div class="mpl-footer-grid" role="navigation" aria-label="Site footer">
        <section class="col brand">
          <div class="brandline"> <span class="logo" aria-hidden="true">M</span>
            <div><b>M Share</b>
              <div class="muted">Quiet, practical tools for mental health and wellbeing.</div>
            </div>
          </div>
          <div class="mpl-pay" aria-label="Support links"> <a class="pay-link" href="coffee.html" target="_blank"
              rel="noopener">Support Us</a> <a class="pay-link" href="https://buy.stripe.com/28E4gy5j6cmD2wu3pk4Rq00"
              target="_blank" rel="noopener">☕ Support Us</a> </div>
        </section>
        <section class="col center"> <!-- Theme Explorer (center) -->
          <div id="mpl-theme-slot" aria-label="Theme controls"></div>
        </section>
        <section class="col right"> <!-- Explore menu (chevrons) -->
          <nav class="mpl-footer-explore" aria-label="Explore">
            <h4>Explore</h4>
            <div id="mpl-footer-explore"></div>
          </nav>
        </section>
      </div>
      <div class="bottom">
        <div>© <span id="yearFooter"></span> MindPayLink · Educational information only; not medical advice.</div>
        <div class="credit">Designed by <b>Alkhadi M Koroma</b></div>
      </div>
    </div>
    <script>(function () { var y = document.getElementById('yearFooter'); if (y) y.textContent = (new Date).getFullYear(); })();</script>
  </footer>
</body>
</html>