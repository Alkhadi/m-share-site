<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover"/>
  <title>Autism Support • M Share</title>
  <meta name="description" content="Autism support (UK): parent/adult/later‑life guides, clinic checklists & references, and an in‑app coach module you can import into M Share. A4, print‑optimised PDFs with brand header/footer."/>
  <link rel="stylesheet" href="style.css" />
  <style>
    .hero{background:linear-gradient(180deg,rgba(14,23,42,.65),rgba(14,23,42,.35));border:1px solid var(--b);border-radius:16px;padding:16px 16px 12px;box-shadow:var(--shadow-1)}
    .row-actions{display:flex;gap:8px;flex-wrap:wrap}
    .cols-3{display:grid;grid-template-columns:repeat(3,minmax(0,1fr));gap:10px}
    .cols-2{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:10px}
    .about p,.card p{max-width:78ch}
    .muted small{opacity:.9}
    pre{background:rgba(148,163,184,.12);border:1px solid var(--b);border-radius:12px;padding:10px;overflow:auto}
    #flowViewer{display:none;margin-top:10px}
    #flowViewer .tile{border:1px solid var(--b);border-radius:12px;padding:10px}
    @media print { .no-print{display:none!important} }
  </style>
  <link rel="stylesheet" href="assets/css/ux-fixes.css" />

  <link rel="stylesheet" href="assets/css/footer-2025.css" />
  <link rel="stylesheet" href="assets/css/header-2025.css" />
  <link rel="stylesheet" href="assets/css/nav-footer-uni.css" />
<link rel="stylesheet" href="assets/css/responsive-fixes.css"/>
<link rel="icon" type="image/png" sizes="32x32" href="icons/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="icons/favicon-16x16.png" />
<link rel="apple-touch-icon" href="icons/apple-touch-icon.png" />
<link rel="manifest" href="manifest.webmanifest" />
  <link rel="stylesheet" href="assets/css/nav-unified.css">
  <link rel="stylesheet" href="assets/css/voice-coach-pro.css">
  <link rel="stylesheet" href="voice-coach-fix.css">




<style id="mpl-mobile-nav-style-v4">
  /* Ensure [hidden] truly hides dropdowns in any theme */
  nav .menu[hidden], nav .submenu[hidden] { display:none !important; }

  /* Small/medium behavior only */
  @media (max-width: 1024px) {
    /* Collapsible whole nav */
    #mainNav[hidden] { display: none !important; }
    /* Group baseline */
    .nav-group, .menu-group { position: relative; }
    /* When marked open, reveal child menu block / list */
    .nav-group.open > .menu,
    .menu-group.open > .submenu { display:block; }

    /* Clickable targets (chevrons/toggles) */
    .nav-group > .menu-toggle,
    .nav-group > .chevron,
    .nav-group [data-chevron],
    .menu-group > .menu-toggle,
    .menu-group > .chevron,
    .menu-group [data-chevron] { cursor:pointer; touch-action: manipulation; }

    /* A11y focus rings on triggers */
    .nav-group > a:focus,
    .nav-group > button:focus,
    .nav-group > .menu-toggle:focus,
    .nav-group > .chevron:focus,
    .menu-group > a:focus,
    .menu-group > button:focus,
    .menu-group > .menu-toggle:focus,
    .menu-group > .chevron:focus { outline:2px solid currentColor; outline-offset:2px; }
  }

  /* Hamburger is hidden on desktop */
  @media (min-width: 1025px) { #navToggle{ display:none !important; } }
</style>





<style id="mpl-desktop-nav-css-v3">
/* Desktop-only navigation helpers (visibility + a11y) */
@media (min-width:1025px){
  .mpl-nav-toggle{display:inline-flex;align-items:center;gap:.25rem;background:none;border:0;padding:.25rem;margin-left:.25rem;cursor:pointer;line-height:1}
  .mpl-nav-toggle:focus,.mpl-nav-toggle:focus-visible{outline:2px solid currentColor;outline-offset:2px}
  [data-mpl-submenu]{display:none;visibility:hidden}
  [data-mpl-open="true"] > [data-mpl-submenu]{display:block;visibility:visible}
  .mpl-chevron{display:inline-block;transform:rotate(0deg);transition:transform .2s ease}
  [data-mpl-open="true"] .mpl-chevron{transform:rotate(180deg)}
  .mpl-sr-only{position:absolute!important;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}
}
</style>


<script id="mpl-desktop-nav-js-v3">
/* Desktop submenu behavior — hover or click, one open, ESC/Outside close, a11y */
(() => {
  const mq = window.matchMedia('(min-width:1025px)');
  let enabled = false;
  let cleanups = [];
  const q = (sel, ctx=document) => Array.from(ctx.querySelectorAll(sel));

  function findSubmenu(el){
    return el.querySelector(':scope > .submenu, :scope > [role="menu"], :scope > ul, :scope > .dropdown-menu, :scope > ol');
  }

  function findTopNavGroups(){
    const navs = q('header nav, nav[role="navigation"], nav.primary, .navbar nav, nav');
    const groups = new Set();
    navs.forEach(nav => {
      const topChildren = [];
      const ul = nav.querySelector(':scope > ul');
      if (ul) topChildren.push(...Array.from(ul.children));
      else topChildren.push(...Array.from(nav.children));
      topChildren.forEach(node => {
        const sub = findSubmenu(node);
        if (sub) groups.add(node);
      });
    });
    return Array.from(groups);
  }

  function closeAll(except){
    q('[data-mpl-open="true"]').forEach(g=>{
      if (except && g === except) return;
      g.setAttribute('data-mpl-open','false');
      const t = g.querySelector(':scope > .mpl-nav-toggle');
      if (t) t.setAttribute('aria-expanded','false');
    });
  }

  function enhance(){
    if (enabled) return;
    enabled = true;

    const groups = findTopNavGroups();
    if (!groups.length) return;

    groups.forEach(group=>{
      const submenu = findSubmenu(group);
      if (!submenu) return;
      submenu.setAttribute('data-mpl-submenu','true');
      group.setAttribute('data-mpl-nav-group','true');
      if (!group.hasAttribute('data-mpl-open')) group.setAttribute('data-mpl-open','false');

      // Label is the first focusable/control on the group (but outside submenu)
      let label = group.querySelector(':scope > a, :scope > button, :scope > [role="button"], :scope > .label, :scope > .menu-label');
      if (!label) label = group.firstElementChild;

      // Toggle button (desktop-only)
      let toggle = group.querySelector(':scope > .mpl-nav-toggle');
      if (!toggle) {
        toggle = document.createElement('button');
        toggle.type = 'button';
        toggle.className = 'mpl-nav-toggle';
        toggle.setAttribute('aria-haspopup','menu');
        toggle.setAttribute('aria-expanded','false');
        toggle.setAttribute('title','Toggle submenu');
        toggle.innerHTML = '<span class="mpl-chevron" aria-hidden="true">▾</span><span class="mpl-sr-only">Toggle submenu</span>';
        if (label && label.nextSibling) group.insertBefore(toggle, label.nextSibling);
        else group.appendChild(toggle);
      }

      const open = () => {
        if (!mq.matches) return;
        closeAll(group);
        group.setAttribute('data-mpl-open','true');
        toggle.setAttribute('aria-expanded','true');
      };
      const close = () => {
        if (!mq.matches) return;
        group.setAttribute('data-mpl-open','false');
        toggle.setAttribute('aria-expanded','false');
      };

      const onEnter = () => open();
      const onLeave = (e) => {
        // close only when leaving group entirely
        const rel = e.relatedTarget;
        if (rel && group.contains(rel)) return;
        close();
      };
      const onToggle = (e) => {
        if (!mq.matches) return;
        e.preventDefault();
        const isOpen = group.getAttribute('data-mpl-open') === 'true';
        if (isOpen) close(); else open();
      };
      const onKeys = (e) => {
        if (!mq.matches) return;
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onToggle(e); }
        else if (e.key === 'Escape') { e.preventDefault(); close(); toggle.focus(); }
      };

      group.addEventListener('mouseenter', onEnter);
      group.addEventListener('mouseleave', onLeave);
      toggle.addEventListener('click', onToggle);
      toggle.addEventListener('keydown', onKeys);

      cleanups.push(()=> {
        group.removeEventListener('mouseenter', onEnter);
        group.removeEventListener('mouseleave', onLeave);
        toggle.removeEventListener('click', onToggle);
        toggle.removeEventListener('keydown', onKeys);
      });
    });

    const onDocClick = (e) => {
      if (!mq.matches) return;
      const openEl = document.querySelector('[data-mpl-open="true"]');
      if (!openEl) return;
      if (openEl.contains(e.target)) return;
      openEl.setAttribute('data-mpl-open','false');
      const t = openEl.querySelector(':scope > .mpl-nav-toggle');
      if (t) t.setAttribute('aria-expanded','false');
    };
    const onDocEsc = (e) => {
      if (!mq.matches) return;
      if (e.key === 'Escape') {
        const openEl = document.querySelector('[data-mpl-open="true"]');
        if (!openEl) return;
        openEl.setAttribute('data-mpl-open','false');
        const t = openEl.querySelector(':scope > .mpl-nav-toggle');
        if (t) { t.setAttribute('aria-expanded','false'); t.focus(); }
      }
    };
    document.addEventListener('click', onDocClick);
    document.addEventListener('keydown', onDocEsc);
    cleanups.push(()=>{ document.removeEventListener('click', onDocClick); document.removeEventListener('keydown', onDocEsc); });
  }

  function teardown(){
    if (!enabled) return;
    closeAll();
    cleanups.forEach(fn => { try { fn(); } catch(_){} });
    cleanups = [];
    enabled = false;
  }

  const react = () => { mq.matches ? enhance() : teardown(); };
  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', react);
  else react();
  mq.addEventListener('change', react);
})();
</script>

</head>
<body>
<a id="top" style="position:absolute;top:0;left:0;width:0;height:0;overflow:hidden"> </a>
<header class="site-header">
  <div class="container navbar">
    <a id="brandLink" class="brand" data-href="index.html" href="index.html"><span class="logo">M</span><span class="brand-text">M Share</span></a>
    <nav class="main-nav" id="mainNav">
  <a data-href="index.html">Wellbeing</a>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">Conditions <span class="icon">▾</span></button>
    <div class="submenu">
      <div class="menu-label">Neurodevelopmental</div>
      <a data-href="autism.html">Autism</a>
      <a data-href="adhd.html">ADHD</a>
      <a data-href="dyslexia-reading-training.html">Dyslexia</a>
      <div class="menu-label">Mental Health</div>
      <a data-href="anxiety.html">Anxiety</a>
      <a data-href="depression.html">Depression</a>
      <a data-href="stress.html">Stress</a>
      <a data-href="sleep.html">Sleep</a>
    </div>
  </div>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">Breathing &amp; Focus <span class="icon">▾</span></button>
    <div class="submenu">
      <div class="menu-label">Guides</div>
      <a data-href="breath.html">Breath (how‑to)</a>
      <a data-href="focus.html">Focus</a>
      <a data-href="mindfulness.html">Mindfulness</a>
      <div class="menu-label">Techniques</div>
      <a data-href="sos-60.html">60‑second Reset</a>
      <a data-href="box-breathing.html">Box Breathing</a>
      <a data-href="4-7-8-breathing.html">4‑7‑8 Breathing</a>
      <a data-href="coherent-5-5.html">Coherent 5‑5</a>
    </div>
  </div>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">Toolkits <span class="icon">▾</span></button>
    <div class="submenu">
      <div class="menu-label">General</div>
      <a data-href="sleep-tools.html">Sleep Tools</a>
      <a data-href="breath-tools.html">Breath Tools</a>
      <a data-href="mood-tools.html">Mood Tools</a>
      <div class="menu-label">Condition‑specific</div>
      <a data-href="adhd-tools.html">ADHD Tools</a>
      <a data-href="autism-tools.html">Autism Tools</a>
      <a data-href="depression-tools.html">Depression Tools</a>
      <a data-href="anxiety-tools.html">Anxiety Tools</a>
      <a data-href="stress-tools.html">Stress Tools</a>
    </div>
  </div>
  <div class="menu-group">
    <button class="menu-toggle" aria-expanded="false">About <span class="icon">▾</span></button>
    <div class="submenu">
      <a data-href="about.html">About</a>
      <a data-href="coffee.html">Support Us</a>
      <a data-href="contact.html">Contact</a>
    </div>
  </div>
</nav>
    <button type="button" id="navToggle" class="nav-toggle" aria-label="Menu" aria-expanded="false" aria-controls="mainNav">☰</button>
  </div>
</header>




<main class="container" id="howto">
  <!-- HERO -->
  <section class="hero card">
    <h1>Autism Support (UK)</h1>
    <p class="muted">Everything in one place: <b>Parent</b>, <b>Adult</b> & <b>Later‑life</b> guides, a <b>Clinic guide</b> with checklists & references, plus an <b>in‑app coach module</b> you can import into M Share. A4 PDFs are print‑optimised with brand header/footer.</p>
    <div class="row-actions" style="margin-top:8px">
      <button id="btnPdfParent" class="btn btn-success" type="button">⬇ Parent quick guide (PDF)</button>
      <button id="btnPdfAdult" class="btn" type="button">⬇ Adult support (PDF)</button>
      <button id="btnPdfLater" class="btn" type="button">⬇ Later life &amp; carer (PDF)</button>
      <button id="btnPdfClinic" class="btn" type="button">⬇ Clinic guide (PDF)</button>
      <button id="btnZipAll" class="btn" type="button">⬇ All PDFs (ZIP)</button>
      <button id="btnDownloadJson" class="btn" type="button">⬇ Coach module (JSON)</button>
      <a class="btn" href="#use">How to use</a>
    </div>
  </section>

  <!-- HOW TO USE -->
  <section id="use" class="card">
    <h2>How to use each deliverable in M Share</h2>
    <div class="cols-3">
      <div class="tile">
        <h3>Parent / Adult / Later‑life PDFs</h3>
        <ul>
          <li>Link as “<b>Download (PDF)</b>” on your Autism landing page.</li>
          <li>Add to onboarding emails and your <em>Share</em> sheet.</li>
        </ul>
      </div>
      <div class="tile">
        <h3>Clinic Guide (PDF)</h3>
        <ul>
          <li>Place under “<b>For Clinicians</b>” or an “Advanced” toggle.</li>
          <li>Use to standardise school/clinic conversations.</li>
        </ul>
      </div>
      <div class="tile">
        <h3>In‑App Module JSON</h3>
        <ul>
          <li>Import and render as a coach that adapts to selected goals.</li>
          <li>Log metrics locally (or secure cloud) for progress graphs.</li>
        </ul>
      </div>
    </div>
    <h4 style="margin-top:8px">What you have now</h4>
    <p class="muted">
      ✅ Four Autism PDFs (Parent, Adult, Later‑life, Clinic) · ✅ Three Dyslexia PDFs (Adult, Parent, Practice Pack) · ✅ In‑app module (JSON).
    </p>
  </section>

  <!-- EVIDENCE SNAPSHOT -->
  <section class="card">
    <h2>Evidence snapshot (UK)</h2>
    <p><b>Children/young people:</b> structured, communication‑focused interventions, environmental adaptations and co‑occurring problem management; consider melatonin via specialists if behavioural sleep approaches fail. Sources: NICE CG170 (support & management). <em>Educational only; not medical advice.</em></p>
    <p><b>Adults:</b> adapted CBT for anxiety/depression, structured support plans, and workplace/healthcare reasonable adjustments. Sources: NICE autism guidance (adults). <em>Educational only.</em></p>
  </section>

  <!-- PRACTICAL SECTIONS -->
  <section class="card">
    <h2>Children &amp; Adolescents</h2>
    <ul>
      <li><b>Naturalistic, caregiver‑mediated coaching (NDBI style):</b> 3–5 min play bursts, copy/expand/celebrate, many times daily.</li>
      <li><b>AAC is speech‑friendly:</b> pictures/PECS/core boards/apps reduce frustration; keep AAC available everywhere.</li>
      <li><b>Visual &amp; structured teaching:</b> First/Then, visual schedules, clear work systems; teach in small steps.</li>
      <li><b>Behaviour → ABC:</b> track antecedent–behaviour–consequence; teach an easier way to ask; reinforce quickly.</li>
      <li><b>Sleep:</b> regularity, routine, light/noise/temperature; discuss melatonin only with a clinician if insomnia persists.</li>
    </ul>
  </section>

  <section class="card">
    <h2>Adults</h2>
    <ul>
      <li><b>Employment:</b> reasonable adjustments (Equality Act), clear written instructions, low‑sensory spaces, flexible hours/hybrid.</li>
      <li><b>Access to Work:</b> workplace assessment, job coach, assistive tech, travel support.</li>
      <li><b>Mental health:</b> adapted CBT (visual structure, concrete goals, graded exposure with sensory planning); monitor medication with clinicians.</li>
      <li><b>Regulation:</b> micro‑breaks, noise management, meltdown/shutdown plans.</li>
    </ul>
  </section>

  <section class="card">
    <h2>Later Life</h2>
    <ul>
      <li>Anticipate sensory/hearing/vision changes; schedule quieter appointments.</li>
      <li>Use pill organisers, checklists, and carer prompts; prepare hospital passports.</li>
      <li>Ask the local authority about adult social care and carers’ assessments.</li>
    </ul>
  </section>

  <section class="card">
    <h2>Neurodevelopmental: ADHD (quick pointers)</h2>
    <ul>
      <li>Core features: inattention, impulsivity, hyperactivity across settings.</li>
      <li>Supports: behavioural strategies, executive‑function scaffolds, environmental cues; review sleep, anxiety.</li>
    </ul>
  </section>

  <section class="card">
    <h2>Mental Health: Anxiety • Depression • Stress • Sleep</h2>
    <ul>
      <li><b>CBT (adapted):</b> visual agendas, concrete skills practice, stepwise exposure with sensory planning.</li>
      <li><b>Sleep:</b> consistent timing, low light, screens off ≥1h; record latency; escalate to clinician if persistent.</li>
    </ul>
  </section>

  <section class="card">
    <h2>Breathing &amp; Focus (2‑minute reset)</h2>
    <ol>
      <li>Sit comfortably; relax shoulders and jaw.</li>
      <li>Inhale quietly through the nose ~4 s; exhale ~6 s.</li>
      <li>Repeat 10 cycles; notice shoulders lowering and heart rate easing.</li>
    </ol>
    <p class="muted">Use before transitions, meetings or bedtime wind‑down.</p>
  </section>

  <!-- In‑app coach -->
  <section class="card">
    <h2>In‑App Coach Module (JSON)</h2>
    <p class="muted">Download and import. The preview below lets you inspect flows and steps.</p>
    <div class="row-actions">
      <button id="btnPreviewFlows" class="btn" type="button">Preview flows</button>
      <button id="btnClearPreview" class="btn" type="button">Clear</button>
    </div>
    <div id="flowViewer" class="card">
      <div class="cols-2">
        <div class="tile">
          <label for="flowPick">Select a flow</label>
          <select id="flowPick" title="Select option"></select>
        </div>
        <div class="tile">
          <label>JSON (selected flow)</label>
          <pre id="jsonPreview" aria-live="polite" style="min-height:88px"></pre>
        </div>
      </div>
      <div class="tile" style="margin-top:8px">
        <h4 id="flowTitle" style="margin:.2rem 0">Flow</h4>
        <div id="flowSteps" class="muted"></div>
      </div>
    </div>
  </section>
</main>

<footer class="footer-2025" id="footer2025">
  <div class="wrap">
    <div class="grid">
      <section class="col brand">
        <div class="brandline"><span class="logo">M</span>
          <div><b>M Share</b><div class="muted">Quiet, practical tools for mental health and wellbeing.</div></div>
        </div>
        <div class="theme-controls">
          <label>Background<input id="themeColor" type="color" value="#0f172a"></label>
          <label>Brightness<input id="themeBrightness" type="range" min="0.85" max="1.25" step="0.01" value="1"></label>
        </div>
        <div class="actions" style="margin-top:8px"><a class="btn" href="#top" id="backToTop">Back to top ↑</a></div>
      </section>
      <section class="col">
        <h4>Explore</h4>
        <p><a data-href="index.html" href="index.html">Wellbeing</a> • <a data-href="breath.html" href="breath.html">Breath</a> • <a data-href="focus.html" href="focus.html">Focus</a> • <a data-href="mindfulness.html" href="mindfulness.html">Mindfulness</a> • <a data-href="about.html" href="about.html">About</a></p>
      </section>
      <section class="col">
        <h4>Toolkits</h4>
        <p><a data-href="mood-tools.html" href="mood-tools.html">Mood</a> • <a data-href="breath-tools.html" href="breath-tools.html">Breath Tools</a> • <a data-href="sleep-tools.html" href="sleep-tools.html">Sleep</a> • <a data-href="anxiety-tools.html" href="anxiety-tools.html">Anxiety</a> • <a data-href="stress-tools.html" href="stress-tools.html">Stress</a></p>
      </section>
      <section class="col">
        <h4>Contact</h4>
        <p><a data-href="contact.html" href="contact.html">Contact</a> • <a href="mailto:info.com">info.com</a></p>
      </section>
    </div>
    <div class="bottom">
      <div>© <span id="yearFooter"></span> MindPayLink · Educational information only; not medical advice.</div>
      <div class="credit">Designed by <b>Alkhadi M Koroma</b></div>
    </div>
  </div>
  <script>document.getElementById("yearFooter")&&(document.getElementById("yearFooter").textContent=(new Date).getFullYear());document.getElementById("backToTop")&&document.getElementById("backToTop").addEventListener("click",function(e){e.preventDefault();try{(document.getElementById("top")||document.body).scrollIntoView({behavior:"smooth",block:"start"})}catch{location.hash="#top"}})</script>
</footer>







<!-- =================== TEMPLATES & DATA =================== -->
<template id="parentHandout"><article><h1>Autism: Parent Quick Guide (UK)</h1><p>See download above for full A4 PDF (brand header/footer).</p></article></template>

<template id="clinicGuide"><article><h1>Autism: Clinic Guide &amp; Checklists (UK)</h1><p>See download above for full A4 PDF.</p></article></template>

<script type="application/json" id="asd_coach_json">
{
  "meta": { "version": "1.1.0", "locale": "en-UK", "brand": "M Share" },
  "flows": [
    {
      "id": "comm",
      "title": "Communication booster",
      "minutes": 5,
      "steps": [
        { "type": "text", "title": "Warm-up", "body": "Follow the child's lead. Mirror play for 30–60 seconds." },
        { "type": "multi-select", "title": "Targets", "options": ["Request (more/help)", "Choice (A/B)", "Comment (look/uh‑oh)", "Social game (again!)"], "saveAs": "comm.targets" },
        { "type": "timer", "seconds": 180, "title": "Play & model", "body": "Model 1–2 word phrases. Pause 5–10 s. Accept all attempts (speech/sign/AAC)." },
        { "type": "log", "metric": "attempts", "title": "Attempts today", "saveAs": "comm.attempts" },
        { "type": "text", "title": "Wrap", "body": "Celebrate. Snapshot: attempts = {{comm.attempts}}." }
      ]
    },
    {
      "id": "abc",
      "title": "Behaviour: ABC coach",
      "minutes": 6,
      "steps": [
        { "type": "text", "title": "Pick one behaviour", "body": "Describe it in observable words." },
        { "type": "abc", "title": "Record ABC", "saveAs": "abc.row" },
        { "type": "checklist", "title": "Teach replacement", "items": ["Give simple way to ask (picture/word)", "Reduce trigger (noise, unclear demand)", "Reinforce calm/ask quickly"] },
        { "type": "log", "metric": "abc.count", "title": "Events today", "saveAs": "abc.count" }
      ]
    },
    {
      "id": "sleep",
      "title": "Sleep routine",
      "minutes": 5,
      "steps": [
        { "type": "planner", "title": "Bed routine", "body": "Choose 3–4 calming steps (bath, book, music).", "saveAs": "sleep.plan" },
        { "type": "timer", "seconds": 60, "title": "Lights down", "body": "Dim lights; no screens. Breathe slowly together." },
        { "type": "survey", "title": "Latency last night", "scale": [0,120], "unit": "min", "saveAs": "sleep.latency" }
      ]
    },
    {
      "id": "sensory",
      "title": "Sensory regulation",
      "minutes": 4,
      "steps": [
        { "type": "picker", "title": "Need → tool", "options": ["Noise->headphones", "Movement->walk/trampoline", "Deep pressure->weighted lap (if liked)"], "saveAs": "sens.pick" },
        { "type": "timer", "seconds": 120, "title": "Do the tool", "body": "Stay curious about comfort; stop if disliked." }
      ]
    }
  ]
}
</script>

<script src="autism.js" defer></script>
<script src="app.js"></script>
<script src="coach.js"></script>
<script src="assets/js/ux-fixes.js"></script>
<script src="assets/js/paylinks.js"></script>
<script src="assets/js/site-core.js"></script>
<script src="assets/js/a11y-fix.js"></script>
<script src="assets/js/start-fix.js"></script><script src="assets/js/nav-core.js"></script>
<script src="assets/js/sound-kit.js"></script>
<script src="assets/js/core/nav-autofix.js"></script>
<script src="assets/js/core/nav-core.js"></script>
<script src="assets/js/core/sound-kit.js"></script>
<script src="assets/header/header.js"></script>
<script src="assets/footer/footer.js"></script>
  <script defer src="assets/js/nav-unified.js"></script>
  <script defer src="assets/js/voice-coach-pro.js"></script>
  <script defer src="voice-coach-fix.js"></script>

<script id="menu-chevron-fix">
(function(){
  var onReady = function(fn){ if (document.readyState !== 'loading') fn(); else document.addEventListener('DOMContentLoaded', fn, {once:true}); };
  onReady(function(){
    // Click or keyboard on a chevron-like control opens/closes the adjacent submenu.
    function toggleFrom(trigger, prevent){
      var btn = trigger.closest('[data-chevron], .chevron, .menu-chevron, .accordion-toggle, .has-children > button, .has-children > a, .hamburger, [aria-haspopup="menu"]');
      if(!btn) return false;

      // Find the submenu: aria-controls target, the next sibling UL/.submenu, or a nested [role="menu"].
      var submenu = null;
      var ctrl = btn.getAttribute('aria-controls');
      if (ctrl) submenu = document.getElementById(ctrl);
      if (!submenu) {
        var li = btn.closest('li, .has-children, nav, .menu, .accordion');
        if (li) submenu = li.querySelector(':scope > ul, :scope > .submenu, :scope > [role="menu"]');
      }
      if (!submenu) return false;

      if (prevent) prevent.preventDefault();

      var open = btn.getAttribute('aria-expanded') === 'true';
      btn.setAttribute('aria-expanded', String(!open));

      // Hide/show with both the hidden attribute and display style — covers most CSS frameworks.
      if (!open) {
        submenu.removeAttribute('hidden');
        submenu.style.display = submenu.style.display || 'block';
      } else {
        submenu.setAttribute('hidden', '');
        submenu.style.display = 'none';
      }

      // If the UI uses a class toggle for transitions:
      var host = btn.closest('.has-children, li, .accordion-item');
      if (host) host.classList.toggle('open', !open);

      return true;
    }

    document.addEventListener('click', function(e){
      if (toggleFrom(e.target, e)) return;
    }, {passive:false});

    document.addEventListener('keydown', function(e){
      // Space or Enter should also toggle when the chevron has keyboard focus
      if ((e.key === 'Enter' || e.key === ' ') && toggleFrom(e.target, e)) {
        e.preventDefault();
      }
    }, {passive:false});
  });
})();
<\/script>

<script id="nav-chevrons-patch-v2">
(function(){
  var onReady = function(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  };

  onReady(function(){

    // ---- Mobile hamburger (#navToggle controls #mainNav) ----
    var nav = document.getElementById('mainNav') || document.querySelector('nav.main-nav');
    var toggle = document.getElementById('navToggle') || document.querySelector('.nav-toggle');

    function openNav(){
      if (!nav || !toggle) return;
      toggle.setAttribute('aria-expanded','true');
      nav.removeAttribute('hidden');
      // If CSS hides it via display, ensure visible on mobile:
      var cs = window.getComputedStyle(nav);
      if (cs.display === 'none') nav.style.display = 'block';
      document.body.classList.add('nav-open');
    }
    function closeNav(){
      if (!nav || !toggle) return;
      toggle.setAttribute('aria-expanded','false');
      nav.setAttribute('hidden','');
      // Respect themes that rely on display toggling:
      nav.style.display = 'none';
      document.body.classList.remove('nav-open');
    }
    function isOpen(){ return toggle && toggle.getAttribute('aria-expanded') === 'true'; }

    if (toggle && nav){
      toggle.setAttribute('aria-controls', nav.id || 'mainNav');
      if (!toggle.hasAttribute('aria-expanded')) toggle.setAttribute('aria-expanded','false');

      toggle.addEventListener('click', function(e){
        e.preventDefault();
        isOpen() ? closeNav() : openNav();
      }, {passive:false});

      // Close on outside click (mobile)
      document.addEventListener('click', function(e){
        if (!isOpen()) return;
        if (e.target.closest('#mainNav, #navToggle, .nav-toggle')) return;
        closeNav();
      }, {passive:true});

      // Close on Escape
      document.addEventListener('keydown', function(e){
        if (e.key === 'Escape' && isOpen()) closeNav();
      }, {passive:true});
    }

    // ---- Chevron submenus (.menu-group -> .menu-toggle + .submenu) ----
    var groups = Array.prototype.slice.call(document.querySelectorAll('.menu-group'));
    var finePointer = window.matchMedia && window.matchMedia('(pointer:fine)').matches;

    function closeOthers(except){
      groups.forEach(function(g){
        if (g === except) return;
        var b = g.querySelector('.menu-toggle, [data-chevron]');
        var m = g.querySelector('.submenu, [role="menu"], :scope > ul');
        if (!b || !m) return;
        b.setAttribute('aria-expanded','false');
        m.setAttribute('hidden','');
        g.classList.remove('open');
      });
    }

    groups.forEach(function(g){
      var btn = g.querySelector('.menu-toggle, [data-chevron]');
      var menu = g.querySelector('.submenu, [role="menu"], :scope > ul');
      if (!btn || !menu) return;

      btn.setAttribute('aria-haspopup','menu');
      if (!btn.hasAttribute('aria-expanded')) btn.setAttribute('aria-expanded','false');
      // initial hidden state
      if (btn.getAttribute('aria-expanded') !== 'true') menu.setAttribute('hidden','');

      function open(){
        closeOthers(g);
        btn.setAttribute('aria-expanded','true');
        menu.removeAttribute('hidden');
        g.classList.add('open');
      }
      function close(){
        btn.setAttribute('aria-expanded','false');
        menu.setAttribute('hidden','');
        g.classList.remove('open');
      }
      function toggle(){
        (btn.getAttribute('aria-expanded') === 'true') ? close() : open();
      }

      // Click / tap on chevron
      btn.addEventListener('click', function(e){
        e.preventDefault();
        toggle();
      }, {passive:false});

      // Keyboard toggle
      btn.addEventListener('keydown', function(e){
        if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); toggle(); }
        if (e.key === 'Escape') { close(); btn.focus(); }
      }, {passive:false});

      // Hover/focus open (desktop only; won't fire on touch-only devices)
      if (finePointer){
        g.addEventListener('mouseenter', open, {passive:true});
        g.addEventListener('mouseleave', close, {passive:true});
        g.addEventListener('focusin', open, {passive:true});
        g.addEventListener('focusout', function(ev){
          if (!g.contains(ev.relatedTarget)) close();
        }, {passive:true});
      }
    });

    // Close open submenu on outside click (desktop)
    document.addEventListener('click', function(e){
      var hitGroup = e.target.closest('.menu-group');
      if (!hitGroup) closeOthers(null);
    }, {passive:true});

  });
})();
<\/script>

<script id="focus-overlay-dedupe-v2">
(function(){
  var onReady = function(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  };
  onReady(function(){
    // Keep the visible "square" focus panel if present:
    var keep = document.querySelector('#focusModal, .focus-screen, .focus-panel, .breathing-panel');
    // Potential legacy/round visuals to remove:
    var extraSel = [
      '#vc-focus', '.vc-focus', '.breathing-circle', '.focus-circle',
      '#breathCanvas', '#voiceCoachCircle', '.circle-bg', '.legacy-breathing', '.coach-circle'
    ].join(',');

    function hide(node){ try{ node.style.display='none'; node.setAttribute('data-removed-by-fix','true'); }catch{} }

    if (keep){
      // Hide large canvases/SVGs NOT inside the keep panel (the behind layer).
      Array.prototype.slice.call(document.querySelectorAll('canvas,svg')).forEach(function(n){
        if (keep.contains(n)) return;
        var r; try{ r = n.getBoundingClientRect(); }catch(e){}
        if (r && r.width >= 180 && r.height >= 180) hide(n);
      });
      // Hide known legacy containers not in keep
      Array.prototype.slice.call(document.querySelectorAll(extraSel)).forEach(function(n){
        if (!keep.contains(n)) hide(n);
      });
    } else {
      // If no "square" panel exists, but both a ring + some other panel exist, keep the top-most by z-index and hide others
      var layers = Array.prototype.slice.call(document.querySelectorAll('#vc-focus, .vc-focus, .focus-panel, .breathing-panel, #focusModal, .focus-screen, canvas, svg'));
      if (!layers.length) return;
      // Pick the visible one with largest z-index
      var top = null, topZ = -Infinity;
      layers.forEach(function(el){
        var cs = window.getComputedStyle(el);
        if (cs.display === 'none' || cs.visibility === 'hidden' || cs.opacity === '0') return;
        var z = parseInt(cs.zIndex || '0', 10); if (isNaN(z)) z = 0;
        if (z >= topZ) { topZ = z; top = el; }
      });
      layers.forEach(function(el){ if (el !== top) hide(el); });
    }
  });
})();
<\/script>

<script id="mpl-mobile-nav-patch-v3">
(function(){
  var MQ = window.matchMedia ? window.matchMedia("(max-width: 1024px)") : {matches:true, addEventListener:function(){}};

  function onReady(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }

  function closestNavRoot() {
    return document.getElementById('mainNav')
        || document.querySelector('nav.main-nav')
        || document.querySelector('header nav')
        || document.querySelector('nav');
  }

  function setupMobileNav(){
    var nav = closestNavRoot();
    if (!nav) return;

    // Hamburger master toggle (optional; only on mobile)
    var toggle = document.getElementById('navToggle')
      || document.querySelector('.nav-toggle, .hamburger, [aria-controls="mainNav"]');

    function openNav(){
      if (!MQ.matches || !nav || !toggle) return;
      toggle.setAttribute('aria-expanded','true');
      nav.removeAttribute('hidden');
      var cs = window.getComputedStyle(nav);
      if (cs.display === 'none') nav.style.display = 'block';
      document.body.classList.add('nav-open');
    }
    function closeNav(){
      if (!nav || !toggle) return;
      toggle.setAttribute('aria-expanded','false');
      if (MQ.matches) {
        nav.setAttribute('hidden','');
        nav.style.display = 'none';
      }
      document.body.classList.remove('nav-open');
    }
    function isOpen(){ return toggle && toggle.getAttribute('aria-expanded') === 'true'; }

    if (toggle) {
      toggle.setAttribute('aria-controls', nav.id || 'mainNav');
      if (!toggle.hasAttribute('aria-expanded')) toggle.setAttribute('aria-expanded','false');
      toggle.addEventListener('click', function(e){ if (MQ.matches) { e.preventDefault(); isOpen()?closeNav():openNav(); } }, {passive:false});
      document.addEventListener('click', function(e){
        if (!MQ.matches || !isOpen()) return;
        if (e.target.closest('#mainNav, #navToggle, .nav-toggle, .hamburger')) return;
        closeNav();
      }, {passive:true});
      document.addEventListener('keydown', function(e){ if (MQ.matches && e.key === 'Escape' && isOpen()) closeNav(); }, {passive:true});
    }

    // Submenu groups (mobile only; do not touch desktop)
    function closeOthers(except) {
      if (!MQ.matches) return;
      nav.querySelectorAll('.menu-group.open').forEach(function(g){
        if (g === except) return;
        var m = g.querySelector('.submenu, [role="menu"], :scope > ul');
        if (m) m.setAttribute('hidden','');
        g.classList.remove('open');
        var t = g.querySelector('.chevron, [data-chevron], .menu-toggle, :scope > a, :scope > button');
        if (t) t.setAttribute('aria-expanded','false');
      });
    }

    Array.prototype.slice.call(nav.querySelectorAll('.menu-group')).forEach(function(g){
      var menu = g.querySelector('.submenu, [role="menu"], :scope > ul');
      if (!menu) return;

      var chevron = g.querySelector('.chevron, [data-chevron], .menu-toggle')
                  || g.querySelector(':scope > a')
                  || g.firstElementChild;

      function initMobile(){
        // Initialize collapsed state on mobile only
        if (!MQ.matches) { g.classList.remove('open'); menu.removeAttribute('hidden'); return; }
        menu.setAttribute('hidden','');
        g.classList.remove('open');
        if (chevron) {
          chevron.setAttribute('tabindex','0');
          chevron.setAttribute('aria-haspopup','menu');
          chevron.setAttribute('aria-expanded','false');

          function open(){ closeOthers(g); menu.removeAttribute('hidden'); g.classList.add('open'); chevron.setAttribute('aria-expanded','true'); }
          function close(){ menu.setAttribute('hidden',''); g.classList.remove('open'); chevron.setAttribute('aria-expanded','false'); }
          function toggle(e){ if (e) e.preventDefault(); (g.classList.contains('open') ? close : open)(); }

          chevron.addEventListener('click', toggle, {passive:false});
          chevron.addEventListener('keydown', function(e){
            if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); toggle(); }
            if (e.key === 'Escape') { e.preventDefault(); close(); chevron.focus(); }
          }, {passive:false});

          // Hover support where available (still gated to mobile width)
          if (window.matchMedia && window.matchMedia('(pointer:fine)').matches) {
            g.addEventListener('mouseenter', function(){ if (MQ.matches) { closeOthers(g); menu.removeAttribute('hidden'); g.classList.add('open'); chevron.setAttribute('aria-expanded','true'); } }, {passive:true});
            g.addEventListener('mouseleave', function(){ if (MQ.matches) { menu.setAttribute('hidden',''); g.classList.remove('open'); chevron.setAttribute('aria-expanded','false'); } }, {passive:true});
          }
        }
      }

      // Initialize now and on viewport changes
      initMobile();
      if (MQ.addEventListener) MQ.addEventListener('change', initMobile);
      else if (MQ.addListener) MQ.addListener(initMobile); // Safari legacy

      // Close open submenu on outside click (mobile)
      document.addEventListener('click', function(e){
        if (!MQ.matches) return;
        var hitGroup = e.target.closest('.menu-group');
        if (!hitGroup) closeOthers(null);
      }, {passive:true});
    });
  }

  onReady(setupMobileNav);
})();
<\/script>

<script id="mpl-vc-patch-v1">
(function(){
  function onReady(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }
  function findPanel(){
    return document.querySelector('#voiceCoachPanel, .voice-coach, #vcPanel, #voiceCoach, #vc-focus-panel');
  }
  function persist(key, val){ try { localStorage.setItem(key, JSON.stringify(val)); } catch(e){} }
  function restore(key){ try { var v = localStorage.getItem(key); return v? JSON.parse(v) : null; } catch(e){ return null; } }

  function makeDraggable(panel){
    if (!panel) return;
    panel.classList.add('vc-draggable');
    panel.style.inset = 'auto'; // avoid anchoring conflicts

    // Drag handle
    var handle = panel.querySelector('.vc-drag-handle');
    if (!handle) {
      handle = document.createElement('div');
      handle.className = 'vc-drag-handle';
      handle.textContent = 'Voice Coach';
      handle.setAttribute('role', 'toolbar');
      panel.insertBefore(handle, panel.firstChild);
    }

    // Pin button
    var pin = panel.querySelector('.vc-pin-toggle');
    if (!pin) {
      pin = document.createElement('button');
      pin.type = 'button';
      pin.className = 'vc-pin-toggle';
      pin.textContent = 'Pin';
      pin.setAttribute('aria-pressed','false');
      panel.appendChild(pin);
    }

    var pref = restore('mpl.vc.pref') || { pinned: false, x: 20, y: 20 };
    var dragging = false, startX=0, startY=0, origX=0, origY=0;

    function applyPos(){
      panel.style.left = (pref.x|0) + 'px';
      panel.style.top  = (pref.y|0) + 'px';
    }
    function updatePinUI(){
      if (pref.pinned) { panel.classList.add('vc-pinned'); pin.textContent = 'Unpin'; pin.setAttribute('aria-pressed','true'); }
      else { panel.classList.remove('vc-pinned'); pin.textContent = 'Pin'; pin.setAttribute('aria-pressed','false'); }
    }

    applyPos(); updatePinUI();

    pin.addEventListener('click', function(){
      pref.pinned = !pref.pinned;
      updatePinUI(); persist('mpl.vc.pref', pref);
    });

    function onDown(ev){
      if (pref.pinned) return;
      dragging = true;
      var p = ('touches' in ev && ev.touches.length) ? ev.touches[0] : ev;
      startX = p.clientX; startY = p.clientY;
      var rect = panel.getBoundingClientRect();
      origX = rect.left + window.scrollX; origY = rect.top + window.scrollY;
      ev.preventDefault();
    }
    function onMove(ev){
      if (!dragging || pref.pinned) return;
      var p = ('touches' in ev && ev.touches.length) ? ev.touches[0] : ev;
      var dx = p.clientX - startX; var dy = p.clientY - startY;
      pref.x = Math.max(0, Math.min(window.innerWidth  - (panel.offsetWidth  || 300), origX + dx));
      pref.y = Math.max(0, Math.min(window.innerHeight - (panel.offsetHeight || 200), origY + dy));
      applyPos();
    }
    function onUp(){ if (!dragging) return; dragging = false; persist('mpl.vc.pref', pref); }

    handle.addEventListener('mousedown', onDown, {passive:false});
    document.addEventListener('mousemove', onMove, {passive:false});
    document.addEventListener('mouseup', onUp, {passive:true});

    handle.addEventListener('touchstart', onDown, {passive:false});
    document.addEventListener('touchmove', onMove, {passive:false});
    document.addEventListener('touchend', onUp, {passive:true});
    document.addEventListener('touchcancel', onUp, {passive:true});
  }

  onReady(function(){
    var p = findPanel();
    if (p) makeDraggable(p);
  });
})();
<\/script>

<script id="mpl-gp-patch-v1">
(function(){
  function onReady(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }

  var DATA = {
    "Short vowels": [
      ["a /a/", ["cat","map","sad","bag","flag","hand","pan","track"]],
      ["e /e/", ["bed","hem","pen","bell","nest","tent","best","neck"]],
      ["i /i/", ["sit","milk","fish","list","swim","brick","hill","chip"]],
      ["o /o/", ["hot","pond","lock","mop","fox","rock","cob","sock"]],
      ["u /u/", ["sun","drum","duck","cup","jump","brush","luck","bus"]]
    ],
    "Long vowels": [
      ["a /ā/", ["late","paper","bake","game","snake","frame","table","gate"]],
      ["e /ē/", ["tree","even","these","meter","theme","delete","piece","chief"]],
      ["i /ī/", ["time","pilot","smile","kite","drive","hike","prize","spider"]],
      ["o /ō/", ["home","open","stone","rope","nose","global","focus","hotel"]],
      ["u /yoo/", ["unit","music","unicorn","human","pupil","future","cube","uniform"]]
    ],
    "Digraphs / trigraphs": [
      ["sh", ["ship","brush","shine","wish","splash","sheep","shop","finish"]],
      ["ch", ["chat","teacher","chess","bench","kitchen","chocolate","chapter","lunch"]],
      ["th (/θ/ or /ð/)", ["thin","this","think","bath","path","father","weather","both"]],
      ["ph", ["phone","graph","photo","dolphin","alphabet","trophy","sphere","elephant"]],
      ["wh", ["when","whale","wheel","whisper","white","where","while","which"]],
      ["igh", ["high","night","sight","light","bright","flight","right","might"]],
      ["tch", ["catch","match","watch","patch","stitch","latch","witch","fetch"]],
      ["dge", ["bridge","edge","badge","hedge","judge","fudge","lodge","wedge"]]
    ],
    "Vowel teams": [
      ["ai/ay", ["rain","day","paint","mail","chain","tray","play","display"]],
      ["ee/ea", ["see","team","green","please","speed","read","beach","seat"]],
      ["oa/ow", ["boat","snow","float","soap","coach","slow","crow","window"]],
      ["oi/oy", ["coin","boy","boil","toy","point","joy","soil","enjoy"]],
      ["ou/ow", ["sound","cloud","house","loud","mouth","brown","crowd","down"]],
      ["au/aw", ["cause","saw","author","August","draw","crawl","sauce","lawn"]]
    ],
    "R‑controlled vowels": [
      ["ar", ["car","start","park","farm","dark","sharp","large","garden"]],
      ["er/ir/ur", ["her","bird","turn","fern","first","nurse","curl","girl"]],
      ["or", ["fork","north","storm","short","horse","corn","porch","torch"]]
    ],
    "Silent letters": [
      ["kn/gn", ["knee","gnome","knife","knight","knock","knead","gnat","gnash"]],
      ["wr", ["write","wrist","wrong","wrap","wreck","wriggle","wren","wrench"]],
      ["mb", ["thumb","comb","lamb","climb","numb","tomb","bomb","crumb"]],
      ["igh", ["light","night","bright","sight","tight","high","slight","delight"]],
      ["tch", ["(pattern)","—","hatch","stitch","notch","clutch","sketch","batch"]]
    ]
  };

  function findGPSection(){
    // Prefer stable IDs if present
    var byId = document.querySelector('#gp-section, #dyslexia-gp, [data-section="dyslexia-gp"]');
    if (byId) return byId;
    // Fallback: heuristics
    var nodes = Array.prototype.slice.call(document.querySelectorAll('section,div,main,article'));
    return nodes.find(function(n){ return /Grapheme[–-]phoneme|GP mapping/i.test(n.textContent); }) || null;
  }
  function findStartButtonNear(el){
    if (!el) return null;
    var btn = el.querySelector('button, .btn, [role="button"]');
    if (btn && /start/i.test(btn.textContent)) return btn;
    // broader search within same section
    var candidates = Array.prototype.slice.call(el.querySelectorAll('button, .btn, [role="button"]'));
    return candidates.find(function(b){ return /start/i.test(b.textContent); }) || null;
  }

  function buildCards(){
    var host = document.createElement('div');
    host.id = 'gp-cards';
    Object.keys(DATA).forEach(function(groupName){
      var card = document.createElement('section');
      card.className = 'gp-card';
      card.setAttribute('tabindex','0');
      card.setAttribute('role','group');
      card.setAttribute('aria-label', groupName);

      var h = document.createElement('h4');
      h.textContent = groupName;
      card.appendChild(h);

      DATA[groupName].forEach(function(line){
        var [label, words] = line;
        var row = document.createElement('div');
        row.className = 'gp-examples';
        var tag = document.createElement('strong');
        tag.textContent = label + ' — ';
        tag.style.marginRight = '6px';
        row.appendChild(tag);
        words.forEach(function(w){
          var chip = document.createElement('span');
          chip.className = 'chip';
          chip.textContent = w;
          row.appendChild(chip);
        });
        card.appendChild(row);
      });

      host.appendChild(card);
    });
    return host;
  }

  function ensureOverlay(){
    var ov = document.getElementById('gp-overlay');
    if (ov) return ov;
    ov = document.createElement('div');
    ov.id = 'gp-overlay';
    ov.setAttribute('hidden','');
    ov.setAttribute('role','dialog');
    ov.setAttribute('aria-modal','true');
    var modal = document.createElement('div');
    modal.className = 'gp-modal';
    var close = document.createElement('button');
    close.className = 'close';
    close.type = 'button';
    close.textContent = 'Close';
    close.addEventListener('click', function(){ ov.setAttribute('hidden',''); });
    ov.appendChild(modal);
    ov.appendChild(close);
    ov.addEventListener('click', function(e){ if (e.target === ov) ov.setAttribute('hidden',''); }, {passive:true});
    document.addEventListener('keydown', function(e){ if (e.key === 'Escape' && !ov.hasAttribute('hidden')) ov.setAttribute('hidden',''); }, {passive:true});
    document.body.appendChild(ov);
    return ov;
  }

  function run(){
    var sec = findGPSection();
    if (!sec) return;
    // Replace existing GP markup with cards (non-destructive: keep a .bak snapshot in DOM via comment)
    if (!sec.__mpl_gp_bak) { sec.__mpl_gp_bak = sec.innerHTML; }
    sec.innerHTML = '';
    var cards = buildCards();
    sec.appendChild(cards);

    // Selection UX
    var selected = null;
    cards.addEventListener('click', function(e){
      var c = e.target.closest('.gp-card');
      if (!c) return;
      Array.prototype.slice.call(cards.querySelectorAll('.gp-card')).forEach(function(x){ x.setAttribute('aria-selected','false'); });
      c.setAttribute('aria-selected','true');
      selected = c;
    }, {passive:true});
    cards.addEventListener('keydown', function(e){
      if ((e.key === 'Enter' || e.key === ' ') && e.target.classList.contains('gp-card')) {
        e.preventDefault(); e.target.click();
      }
    });

    // Hook section Start button -> focus the selected card
    var start = findStartButtonNear(sec);
    if (start) {
      var overlay = ensureOverlay();
      start.addEventListener('click', function(){
        var card = selected || cards.querySelector('.gp-card');
        if (!card) return;
        var clone = card.cloneNode(true);
        overlay.querySelector('.gp-modal').innerHTML = '';
        overlay.querySelector('.gp-modal').appendChild(clone);
        overlay.removeAttribute('hidden');
      });
    }
  }

  onReady(run);
})();
<\/script>

<script id="mpl-tts-patch-v1">
(function(){
  function onReady(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }

  function findReadingSection(){
    var byId = document.querySelector('#reading-section, [data-section="reading"], #section4');
    if (byId) return byId;
    var nodes = Array.prototype.slice.call(document.querySelectorAll('section,div,main,article'));
    return nodes.find(function(n){ return /section\s*4|reading section|Press\s*start\s*begin\s*reading/i.test(n.textContent); }) || null;
  }
  function findStartButtonWithin(el){
    if (!el) return null;
    var buttons = Array.prototype.slice.call(el.querySelectorAll('button, .btn, [role="button"]'));
    return buttons.find(function(b){ return /start/i.test(b.textContent.trim()); }) || null;
  }
  function getSelectionText(){
    var sel = window.getSelection && window.getSelection();
    if (sel && String(sel).trim()) return String(sel);
    return '';
  }
  function pickDefaultText(sectionEl){
    // Prefer an explicit container if present
    var target = sectionEl.querySelector('[data-reading-default], .reading-text, article, p') || sectionEl;
    return (target.innerText || target.textContent || '').trim();
  }

  function pickVoice(synth){
    try {
      var voices = synth.getVoices() || [];
      // Prefer natural UK/US English if available
      var preferred = [
        "Microsoft Sonia Online (Natural)",
        "Google UK English Female",
        "Microsoft Ryan Online (Natural)",
        "Google US English",
        "Microsoft Aria Online (Natural)"
      ];
      for (var i=0;i<preferred.length;i++){
        var v = voices.find(function(x){ return x.name.indexOf(preferred[i]) !== -1; });
        if (v) return v;
      }
      var enGB = voices.find(function(v){return /en-GB/i.test(v.lang);});
      if (enGB) return enGB;
      var en = voices.find(function(v){return /en/i.test(v.lang);});
      return en || voices[0] || null;
    } catch(e){ return null; }
  }

  function run(){
    if (!('speechSynthesis' in window) || !('SpeechSynthesisUtterance' in window)) return;
    var synth = window.speechSynthesis;
    var sec = findReadingSection();
    if (!sec) return;
    var startBtn = findStartButtonWithin(sec);
    if (!startBtn) return;

    var speaking = false, currentUtterance = null;

    function speak(text){
      if (!text) return;
      if (synth.speaking) synth.cancel();
      var u = new SpeechSynthesisUtterance(text);
      var v = pickVoice(synth);
      if (v) u.voice = v;
      u.rate = 0.95; u.pitch = 1.0; u.volume = 1.0;
      u.onend = function(){ speaking = false; startBtn.textContent = 'Start'; };
      u.onerror = function(){ speaking = false; startBtn.textContent = 'Start'; };
      speaking = true;
      startBtn.textContent = 'Stop';
      synth.speak(u);
      currentUtterance = u;
    }

    startBtn.addEventListener('click', function(){
      if (speaking) {
        synth.cancel();
        speaking = false;
        startBtn.textContent = 'Start';
        return;
      }
      var chosen = getSelectionText();
      if (!chosen) chosen = pickDefaultText(sec);
      speak(chosen);
    });
  }

  onReady(run);
})();
<\/script>

<script id="mpl-focus-dedupe-v3">
(function(){
  function onReady(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }
  function hide(node){ if (!node) return; node.style.display='none'; node.setAttribute('data-removed-by-fix','true'); }
  function run(){
    // Keep gp overlay; remove duplicate/custom ones if both present
    var keep = document.getElementById('gp-overlay') || document.querySelector('#focusModal, .focus-screen');
    var layers = Array.prototype.slice.call(document.querySelectorAll('#focusModal, .focus-screen, .focus-overlay, #vc-focus, .vc-focus'));
    if (!layers.length) return;
    if (!keep) {
      // Choose topmost visible as keep
      var top = null, z = -Infinity;
      layers.forEach(function(el){
        var cs = window.getComputedStyle(el);
        if (cs.display === 'none' || cs.visibility === 'hidden' || cs.opacity === '0') return;
        var zi = parseInt(cs.zIndex||'0',10); if (isNaN(zi)) zi = 0;
        if (zi >= z) { z = zi; top = el; }
      });
      keep = top;
    }
    layers.forEach(function(el){ if (el !== keep) hide(el); });
  }
  onReady(run);
})();
<\/script>

<script id="mpl-mobile-nav-patch-v4">
(function(){
  var MQ = window.matchMedia ? window.matchMedia('(max-width: 1024px)') : {matches:true, addEventListener:function(){}};

  function onReady(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }

  function findNav(){
    return document.getElementById('mainNav')
        || document.querySelector('nav.main-nav')
        || document.querySelector('header nav')
        || document.querySelector('nav');
  }

  function setup(){
    var nav = findNav();
    if (!nav) return;

    // Hamburger toggle for entire nav (mobile only)
    var toggle = document.getElementById('navToggle')
      || document.querySelector('.nav-toggle, .hamburger, [aria-controls="mainNav"]');

    function openNav(){
      if (!MQ.matches || !nav || !toggle) return;
      toggle.setAttribute('aria-expanded','true');
      nav.removeAttribute('hidden');
      var cs = window.getComputedStyle(nav);
      if (cs.display === 'none') nav.style.display = 'block';
      document.body.classList.add('nav-open');
    }
    function closeNav(){
      if (!nav || !toggle) return;
      toggle.setAttribute('aria-expanded','false');
      if (MQ.matches) {
        nav.setAttribute('hidden','');
        nav.style.display = 'none';
      }
      document.body.classList.remove('nav-open');
    }
    function isOpen(){ return toggle && toggle.getAttribute('aria-expanded') === 'true'; }

    if (toggle) {
      toggle.setAttribute('aria-controls', nav.id || 'mainNav');
      if (!toggle.hasAttribute('aria-expanded')) toggle.setAttribute('aria-expanded','false');
      toggle.addEventListener('click', function(e){
        if (!MQ.matches) return;
        e.preventDefault();
        isOpen() ? closeNav() : openNav();
      }, {passive:false});
      // Close nav on outside click
      document.addEventListener('click', function(e){
        if (!MQ.matches || !isOpen()) return;
        if (e.target.closest('#mainNav, #navToggle, .nav-toggle, .hamburger')) return;
        closeNav();
      }, {passive:true});
      // Close nav on Escape key
      document.addEventListener('keydown', function(e){
        if (MQ.matches && e.key === 'Escape' && isOpen()) closeNav();
      }, {passive:true});
    }

    // Submenu groups toggling
    function closeOthers(except){
      if (!MQ.matches) return;
      nav.querySelectorAll('.menu-group.open').forEach(function(g){
        if (g === except) return;
        var m = g.querySelector('.submenu, [role="menu"], :scope > ul');
        if (m) m.setAttribute('hidden','');
        g.classList.remove('open');
        var c = g.querySelector('.chevron, [data-chevron], .menu-toggle, :scope > a, :scope > button');
        if (c) c.setAttribute('aria-expanded','false');
      });
    }

    Array.prototype.slice.call(nav.querySelectorAll('.menu-group')).forEach(function(group){
      var menu = group.querySelector('.submenu, [role="menu"], :scope > ul');
      if (!menu) return;
      var toggleEl = group.querySelector('.chevron, [data-chevron], .menu-toggle')
                    || group.querySelector(':scope > a')
                    || group.firstElementChild;
      function initState(){
        if (!MQ.matches) {
          // On desktop, menus are always visible; clear attributes
          menu.removeAttribute('hidden');
          group.classList.remove('open');
          if (toggleEl) toggleEl.setAttribute('aria-expanded','false');
          return;
        }
        menu.setAttribute('hidden','');
        group.classList.remove('open');
        if (toggleEl) {
          toggleEl.setAttribute('tabindex','0');
          toggleEl.setAttribute('aria-haspopup','menu');
          toggleEl.setAttribute('aria-expanded','false');
        }
      }
      function open(){ closeOthers(group); menu.removeAttribute('hidden'); group.classList.add('open'); if (toggleEl) toggleEl.setAttribute('aria-expanded','true'); }
      function close(){ menu.setAttribute('hidden',''); group.classList.remove('open'); if (toggleEl) toggleEl.setAttribute('aria-expanded','false'); }
      function toggle(e){ if (e) e.preventDefault(); group.classList.contains('open') ? close() : open(); }

      // Initialize now and on viewport changes
      initState();
      if (MQ.addEventListener) MQ.addEventListener('change', initState);
      else if (MQ.addListener) MQ.addListener(initState);

      // Click/tap support on mobile
      if (toggleEl) {
        toggleEl.addEventListener('click', function(e){ if (!MQ.matches) return; toggle(e); }, {passive:false});
        toggleEl.addEventListener('keydown', function(e){
          if (!MQ.matches) return;
          if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); toggle(e); }
          if (e.key === 'Escape') { e.preventDefault(); close(); toggleEl.focus(); }
        }, {passive:false});
      }
      // Hover/focus for desktop (pointer:fine only)
      if (window.matchMedia && window.matchMedia('(pointer:fine)').matches) {
        group.addEventListener('mouseenter', function(){ if (!MQ.matches) open(); }, {passive:true});
        group.addEventListener('mouseleave', function(){ if (!MQ.matches) close(); }, {passive:true});
        group.addEventListener('focusin',   function(){ if (!MQ.matches) open(); }, {passive:true});
        group.addEventListener('focusout',  function(ev){ if (MQ.matches) return; if (!group.contains(ev.relatedTarget)) close(); }, {passive:true});
      }
    });

    // Close open submenu when clicking outside (mobile only)
    document.addEventListener('click', function(e){
      if (!MQ.matches) return;
      var hit = e.target.closest('.menu-group');
      if (!hit) closeOthers(null);
    }, {passive:true});
  }
  onReady(setup);
})();
<\/script>

<script id="mpl-vc-patch-v2">
(function(){
  function onReady(fn){
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, {once:true});
  }
  function findPanel(){
    return document.querySelector('#voiceCoachPanel, .voice-coach, #vcPanel, #voiceCoach, #vc-focus-panel');
  }
  function persist(key, val){ try { localStorage.setItem(key, JSON.stringify(val)); } catch(e){} }
  function restore(key){ try { var v = localStorage.getItem(key); return v ? JSON.parse(v) : null; } catch(e){ return null; } }
  function makeDraggable(panel){
    if (!panel) return;
    panel.classList.add('vc-draggable');
    panel.style.inset = 'auto';
    var handle = panel.querySelector('.vc-drag-handle');
    if (!handle) {
      handle = document.createElement('div');
      handle.className = 'vc-drag-handle';
      handle.textContent = 'Voice Coach';
      handle.setAttribute('role','toolbar');
      panel.insertBefore(handle, panel.firstChild);
    }
    var pin = panel.querySelector('.vc-pin-toggle');
    if (!pin) {
      pin = document.createElement('button');
      pin.type = 'button';
      pin.className = 'vc-pin-toggle';
      pin.textContent = 'Pin';
      pin.setAttribute('aria-pressed','false');
      panel.appendChild(pin);
    }
    var pref = restore('mpl.vc.pref') || { pinned: false, x: 20, y: 20 };
    var dragging = false, startX=0, startY=0, origX=0, origY=0;
    function applyPos(){ panel.style.left = (pref.x|0) + 'px'; panel.style.top  = (pref.y|0) + 'px'; }
    function updatePinUI(){
      if (pref.pinned) { panel.classList.add('vc-pinned'); pin.textContent = 'Unpin'; pin.setAttribute('aria-pressed','true'); }
      else { panel.classList.remove('vc-pinned'); pin.textContent = 'Pin'; pin.setAttribute('aria-pressed','false'); }
    }
    applyPos(); updatePinUI();
    pin.addEventListener('click', function(){ pref.pinned = !pref.pinned; updatePinUI(); persist('mpl.vc.pref', pref); });
    function onDown(ev){ if (pref.pinned) return; dragging = true; var p = ('touches' in ev && ev.touches.length) ? ev.touches[0] : ev; startX = p.clientX; startY = p.clientY; var rect = panel.getBoundingClientRect(); origX = rect.left + window.scrollX; origY = rect.top + window.scrollY; ev.preventDefault(); }
    function onMove(ev){ if (!dragging || pref.pinned) return; var p = ('touches' in ev && ev.touches.length) ? ev.touches[0] : ev; var dx = p.clientX - startX; var dy = p.clientY - startY; pref.x = Math.max(0, Math.min(window.innerWidth  - (panel.offsetWidth  || 300), origX + dx)); pref.y = Math.max(0, Math.min(window.innerHeight - (panel.offsetHeight || 200), origY + dy)); applyPos(); }
    function onUp(){ if (!dragging) return; dragging = false; persist('mpl.vc.pref', pref); }
    handle.addEventListener('mousedown', onDown, {passive:false});
    document.addEventListener('mousemove', onMove, {passive:false});
    document.addEventListener('mouseup', onUp, {passive:true});
    handle.addEventListener('touchstart', onDown, {passive:false});
    document.addEventListener('touchmove', onMove, {passive:false});
    document.addEventListener('touchend', onUp, {passive:true});
    document.addEventListener('touchcancel', onUp, {passive:true});
  }
  onReady(function(){ var p = findPanel(); if (p) makeDraggable(p); });
})();
<\/script>

<script id="mpl-gp-patch-v2">
(function(){
  function onReady(fn){ if (document.readyState !== 'loading') fn(); else document.addEventListener('DOMContentLoaded', fn, {once:true}); }
  // Data object containing six categories and eight examples per line (two originals + six new)
  var DATA = {
    "Short vowels": [
      ["a /a/", ["cat","map","sad","bag","flag","hand","pan","track"]],
      ["e /e/", ["bed","hem","pen","bell","nest","tent","best","neck"]],
      ["i /i/", ["sit","milk","fish","list","swim","brick","hill","chip"]],
      ["o /o/", ["hot","pond","lock","mop","fox","rock","cob","sock"]],
      ["u /u/", ["sun","drum","duck","cup","jump","brush","luck","bus"]]
    ],
    "Long vowels": [
      ["a /ā/", ["late","paper","bake","game","snake","frame","table","gate"]],
      ["e /ē/", ["tree","even","these","meter","theme","delete","piece","chief"]],
      ["i /ī/", ["time","pilot","smile","kite","drive","hike","prize","spider"]],
      ["o /ō/", ["home","open","stone","rope","nose","global","focus","hotel"]],
      ["u /yoo/", ["unit","music","unicorn","human","pupil","future","cube","uniform"]]
    ],
    "Digraphs / trigraphs": [
      ["sh", ["ship","brush","shine","wish","splash","sheep","shop","finish"]],
      ["ch", ["chat","teacher","chess","bench","kitchen","chocolate","chapter","lunch"]],
      ["th (/θ/ or /ð/)", ["thin","this","think","bath","path","father","weather","both"]],
      ["ph", ["phone","graph","photo","dolphin","alphabet","trophy","sphere","elephant"]],
      ["wh", ["when","whale","wheel","whisper","white","where","while","which"]],
      ["igh", ["high","night","sight","light","bright","flight","right","might"]],
      ["tch", ["catch","match","watch","patch","stitch","latch","witch","fetch"]],
      ["dge", ["bridge","edge","badge","hedge","judge","fudge","lodge","wedge"]]
    ],
    "Vowel teams": [
      ["ai/ay", ["rain","day","paint","mail","chain","tray","play","display"]],
      ["ee/ea", ["see","team","green","please","speed","read","beach","seat"]],
      ["oa/ow", ["boat","snow","float","soap","coach","slow","crow","window"]],
      ["oi/oy", ["coin","boy","boil","toy","point","joy","soil","enjoy"]],
      ["ou/ow", ["sound","cloud","house","loud","mouth","brown","crowd","down"]],
      ["au/aw", ["cause","saw","author","August","draw","crawl","sauce","lawn"]]
    ],
    "R‑controlled vowels": [
      ["ar", ["car","start","park","farm","dark","sharp","large","garden"]],
      ["er/ir/ur", ["her","bird","turn","fern","first","nurse","curl","girl"]],
      ["or", ["fork","north","storm","short","horse","corn","porch","torch"]]
    ],
    "Silent letters": [
      ["kn/gn", ["knee","gnome","knife","knight","knock","knead","gnat","gnash"]],
      ["wr", ["write","wrist","wrong","wrap","wreck","wriggle","wren","wrench"]],
      ["mb", ["thumb","comb","lamb","climb","numb","tomb","bomb","crumb"]],
      ["igh", ["light","night","bright","sight","tight","high","slight","delight"]],
      ["tch", ["(pattern)", "—", "hatch","stitch","notch","clutch","sketch","batch"]]
    ]
  };
  // Attempt to locate the GP section using stable IDs or heuristics
  function findGPSection(){
    var byId = document.querySelector('#gp-section, #dyslexia-gp, [data-section="dyslexia-gp"]');
    if (byId) return byId;
    var nodes = Array.prototype.slice.call(document.querySelectorAll('section,div,main,article'));
    return nodes.find(function(n){ return /Grapheme[–-]phoneme|GP mapping/i.test(n.textContent); }) || null;
  }
  function findStartButtonNear(el){
    if (!el) return null;
    var btn = el.querySelector('button, .btn, [role="button"]');
    if (btn && /start/i.test(btn.textContent)) return btn;
    var candidates = Array.prototype.slice.call(el.querySelectorAll('button, .btn, [role="button"]'));
    return candidates.find(function(b){ return /start/i.test(b.textContent); }) || null;
  }
  function buildCards(){
    var host = document.createElement('div');
    host.id = 'gp-cards';
    Object.keys(DATA).forEach(function(name){
      var card = document.createElement('section');
      card.className = 'gp-card';
      card.setAttribute('tabindex','0');
      card.setAttribute('role','group');
      card.setAttribute('aria-label', name);
      var h = document.createElement('h4');
      h.textContent = name;
      card.appendChild(h);
      DATA[name].forEach(function(item){
        var label = item[0];
        var words = item[1];
        var row = document.createElement('div');
        row.className = 'gp-examples';
        var tag = document.createElement('strong');
        tag.textContent = label + ' — ';
        tag.style.marginRight = '6px';
        row.appendChild(tag);
        words.forEach(function(w){
          var chip = document.createElement('span');
          chip.className = 'chip';
          chip.textContent = w;
          row.appendChild(chip);
        });
        card.appendChild(row);
      });
      host.appendChild(card);
    });
    return host;
  }
  function ensureOverlay(){
    var ov = document.getElementById('gp-overlay');
    if (ov) return ov;
    ov = document.createElement('div');
    ov.id = 'gp-overlay';
    ov.setAttribute('hidden','');
    ov.setAttribute('role','dialog');
    ov.setAttribute('aria-modal','true');
    var modal = document.createElement('div');
    modal.className = 'gp-modal';
    var close = document.createElement('button');
    close.className = 'close';
    close.type = 'button';
    close.textContent = 'Close';
    close.addEventListener('click', function(){ ov.setAttribute('hidden',''); });
    ov.appendChild(modal);
    ov.appendChild(close);
    ov.addEventListener('click', function(e){ if (e.target === ov) ov.setAttribute('hidden',''); }, {passive:true});
    document.addEventListener('keydown', function(e){ if (e.key === 'Escape' && !ov.hasAttribute('hidden')) ov.setAttribute('hidden',''); }, {passive:true});
    document.body.appendChild(ov);
    return ov;
  }
  function run(){
    var sec = findGPSection();
    if (!sec) return;
    // Preserve original content if not already stored
    if (!sec.__mpl_gp_bak) sec.__mpl_gp_bak = sec.innerHTML;
    // Replace section content with cards
    sec.innerHTML = '';
    var cards = buildCards();
    sec.appendChild(cards);
    // Selection handling
    var selected = null;
    cards.addEventListener('click', function(e){ var c = e.target.closest('.gp-card'); if (!c) return; Array.prototype.slice.call(cards.querySelectorAll('.gp-card')).forEach(function(x){ x.setAttribute('aria-selected','false'); }); c.setAttribute('aria-selected','true'); selected = c; }, {passive:true});
    cards.addEventListener('keydown', function(e){ if ((e.key === 'Enter' || e.key === ' ') && e.target.classList.contains('gp-card')) { e.preventDefault(); e.target.click(); } });
    // Hook Start button to show overlay
    var startBtn = findStartButtonNear(sec);
    if (startBtn) {
      var overlay = ensureOverlay();
      startBtn.addEventListener('click', function(){ var card = selected || cards.querySelector('.gp-card'); if (!card) return; var clone = card.cloneNode(true); overlay.querySelector('.gp-modal').innerHTML = ''; overlay.querySelector('.gp-modal').appendChild(clone); overlay.removeAttribute('hidden'); });
    }
  }
  onReady(run);
})();
<\/script>

<script id="mpl-tts-patch-v2">
(function(){
  function onReady(fn){ if (document.readyState !== 'loading') fn(); else document.addEventListener('DOMContentLoaded', fn, {once:true}); }
  function findReadingSection(){ var byId = document.querySelector('#reading-section, [data-section="reading"], #section4'); if (byId) return byId; var nodes = Array.prototype.slice.call(document.querySelectorAll('section,div,main,article')); return nodes.find(function(n){ return /section\s*4|reading section|Press\s*start\s*begin\s*reading/i.test(n.textContent); }) || null; }
  function findStartButtonWithin(el){ if (!el) return null; var btns = Array.prototype.slice.call(el.querySelectorAll('button, .btn, [role="button"]')); return btns.find(function(b){ return /start/i.test((b.textContent||'').trim()); }) || null; }
  function getSelectionText(){ var sel = window.getSelection && window.getSelection(); if (sel && String(sel).trim()) return String(sel); return ''; }
  function pickDefaultText(sectionEl){ var target = sectionEl.querySelector('[data-reading-default], .reading-text, article, p') || sectionEl; return (target.innerText || target.textContent || '').trim(); }
  function pickVoice(synth){ try { var voices = synth.getVoices() || []; var preferred = [ 'Microsoft Sonia Online (Natural)', 'Google UK English Female', 'Microsoft Ryan Online (Natural)', 'Google US English', 'Microsoft Aria Online (Natural)' ]; for (var i=0; i<preferred.length; i++){ var v = voices.find(function(x){ return x.name.indexOf(preferred[i]) !== -1; }); if (v) return v; } var enGB = voices.find(function(v){ return /en-GB/i.test(v.lang); }); if (enGB) return enGB; var en = voices.find(function(v){ return /en/i.test(v.lang); }); return en || voices[0] || null; } catch(e){ return null; } }
  function run(){ if (!('speechSynthesis' in window) || !('SpeechSynthesisUtterance' in window)) return; var synth = window.speechSynthesis; var sec = findReadingSection(); if (!sec) return; var startBtn = findStartButtonWithin(sec); if (!startBtn) return; var speaking = false; var currentUtterance = null; function speak(text){ if (!text) return; if (synth.speaking) synth.cancel(); var u = new SpeechSynthesisUtterance(text); var v = pickVoice(synth); if (v) u.voice = v; u.rate = 0.95; u.pitch = 1.0; u.volume = 1.0; u.onend = function(){ speaking = false; startBtn.textContent = 'Start'; }; u.onerror = function(){ speaking = false; startBtn.textContent = 'Start'; }; speaking = true; startBtn.textContent = 'Stop'; synth.speak(u); currentUtterance = u; }
    startBtn.addEventListener('click', function(){ if (speaking){ synth.cancel(); speaking = false; startBtn.textContent = 'Start'; return; } var chosen = getSelectionText(); if (!chosen) chosen = pickDefaultText(sec); speak(chosen); }); }
  onReady(run);
})();
<\/script>

<script id="mpl-focus-dedupe-v4">
(function(){
  function onReady(fn){ if (document.readyState !== 'loading') fn(); else document.addEventListener('DOMContentLoaded', fn, {once:true}); }
  function hide(node){ if (!node) return; node.style.display='none'; node.setAttribute('data-removed-by-fix','true'); }
  function run(){
    // Keep GP overlay if present; otherwise choose topmost focus layer
    var keep = document.getElementById('gp-overlay') || document.querySelector('#focusModal, .focus-screen');
    var layers = Array.prototype.slice.call(document.querySelectorAll('#focusModal, .focus-screen, .focus-overlay, #vc-focus, .vc-focus'));
    if (!layers.length) return;
    if (!keep) {
      var top = null, z = -Infinity;
      layers.forEach(function(el){ var cs = window.getComputedStyle(el); if (cs.display === 'none' || cs.visibility === 'hidden' || cs.opacity === '0') return; var zi = parseInt(cs.zIndex || '0',10); if (isNaN(zi)) zi = 0; if (zi >= z) { z = zi; top = el; } });
      keep = top;
    }
    layers.forEach(function(el){ if (el !== keep) hide(el); });
  }
  onReady(run);
})();
<\/script>

<style id="mpl-vc-drag-css-v3">
/* Voice Coach draggable panel + pin/unpin (desktop & mobile) */
[data-mpl-vc]{position:fixed;z-index:2147483646;max-width:min(90vw,480px)}
#mpl-vc-handle{display:flex;align-items:center;justify-content:space-between;gap:.5rem;padding:.5rem .75rem;font-weight:600;cursor:move;user-select:none}
#mpl-vc-handle:focus,#mpl-vc-handle:focus-visible{outline:2px solid currentColor;outline-offset:2px}
#mpl-vc-pin{border:1px solid currentColor;background:transparent;padding:.25rem .5rem;border-radius:.25rem;cursor:pointer}
#mpl-vc-pin:focus,#mpl-vc-pin:focus-visible{outline:2px solid currentColor;outline-offset:2px}
[data-mpl-vc][data-pinned="true"] #mpl-vc-handle{cursor:default;opacity:.95}
.mpl-vc-hidden{display:none!important}
</style>


<script id="mpl-vc-drag-js-v3">
/* Voice Coach panel: add handle, drag/pin with persistence (mpl.vc.pref.v1) */
(() => {
  const KEY='mpl.vc.pref.v1';
  const sel = '#voiceCoachPanel, #voiceCoach, #vcPanel, .voice-coach, #vc-focus-panel';
  const panel = document.querySelector(sel);
  if (!panel) return;

  try {
    panel.setAttribute('data-mpl-vc','');
    panel.style.touchAction = 'none';

    // Insert handle if missing
    let handle = panel.querySelector('#mpl-vc-handle');
    if (!handle) {
      handle = document.createElement('div');
      handle.id = 'mpl-vc-handle';
      handle.tabIndex = 0;
      handle.setAttribute('role','toolbar');
      const title = document.createElement('span');
      title.textContent = 'Voice Coach';
      const pin = document.createElement('button');
      pin.id = 'mpl-vc-pin';
      pin.type = 'button';
      pin.setAttribute('aria-pressed','false');
      pin.textContent = 'Pin';
      handle.appendChild(title);
      handle.appendChild(pin);
      panel.prepend(handle);
    }
    const pinBtn = handle.querySelector('#mpl-vc-pin');

    // Load / apply state
    const state = (() => {
      try { return Object.assign({x: null, y: null, pinned: false}, JSON.parse(localStorage.getItem(KEY) || '{}')); }
      catch { return {x:null,y:null,pinned:false}; }
    })();

    function save(){ try { localStorage.setItem(KEY, JSON.stringify(state)); } catch(_){} }

    function clamp(v, min, max){ return Math.max(min, Math.min(max, v)); }

    function applyPosition(){
      const vw = window.innerWidth, vh = window.innerHeight;
      const rect = panel.getBoundingClientRect();
      const w = rect.width || 320, h = rect.height || 180;

      // Defaults: bottom-right 24px
      let x = state.x ?? (vw - w - 24);
      let y = state.y ?? (vh - h - 24);
      x = clamp(x, 8, Math.max(8, vw - w - 8));
      y = clamp(y, 8, Math.max(8, vh - h - 8));

      // NOTE: avoid backticks inside outer template literal
      panel.style.left = (x + 'px');
      panel.style.top  = (y + 'px');
    }

    function applyPinned(){
      panel.setAttribute('data-pinned', String(!!state.pinned));
      pinBtn.setAttribute('aria-pressed', String(!!state.pinned));
      pinBtn.textContent = state.pinned ? 'Unpin' : 'Pin';
    }

    applyPosition(); applyPinned();
    window.addEventListener('resize', applyPosition);

    // Dragging
    let dragging = false, startX=0, startY=0, originX=0, originY=0;

    const startDrag = (clientX, clientY) => {
      if (state.pinned) return;
      dragging = true;
      const rect = panel.getBoundingClientRect();
      originX = rect.left; originY = rect.top;
      startX = clientX; startY = clientY;
      document.body.style.userSelect = 'none';
    };
    const moveDrag = (clientX, clientY) => {
      if (!dragging) return;
      const dx = clientX - startX, dy = clientY - startY;
      state.x = Math.round(originX + dx);
      state.y = Math.round(originY + dy);
      applyPosition();
    };
    const endDrag = () => {
      if (!dragging) return;
      dragging = false;
      document.body.style.userSelect = '';
      save();
    };

    // Mouse
    handle.addEventListener('mousedown', (e)=>{
      if (e.target === pinBtn) return; // allow click on pin
      e.preventDefault();
      startDrag(e.clientX, e.clientY);
    });
    document.addEventListener('mousemove', (e)=> moveDrag(e.clientX, e.clientY));
    document.addEventListener('mouseup', endDrag);

    // Touch
    handle.addEventListener('touchstart', (e)=>{
      if (e.target === pinBtn) return;
      const t = e.touches[0]; if (!t) return;
      startDrag(t.clientX, t.clientY);
    }, {passive:true});
    document.addEventListener('touchmove', (e)=>{
      if (!dragging) return;
      const t = e.touches[0]; if (!t) return;
      moveDrag(t.clientX, t.clientY);
    }, {passive:true});
    document.addEventListener('touchend', endDrag);

    // Keyboard on handle
    handle.addEventListener('keydown', (e)=>{
      const step = (e.shiftKey?20:10);
      if (e.key === 'Enter') { e.preventDefault(); state.pinned = !state.pinned; applyPinned(); save(); }
      if (state.pinned) return;
      if (e.key === 'ArrowLeft'){ e.preventDefault(); state.x = (state.x ?? panel.getBoundingClientRect().left) - step; applyPosition(); save(); }
      if (e.key === 'ArrowRight'){ e.preventDefault(); state.x = (state.x ?? panel.getBoundingClientRect().left) + step; applyPosition(); save(); }
      if (e.key === 'ArrowUp'){ e.preventDefault(); state.y = (state.y ?? panel.getBoundingClientRect().top) - step; applyPosition(); save(); }
      if (e.key === 'ArrowDown'){ e.preventDefault(); state.y = (state.y ?? panel.getBoundingClientRect().top) + step; applyPosition(); save(); }
      if (e.key === 'Escape'){ e.preventDefault(); state.pinned = true; applyPinned(); save(); }
    });

    // Pin button
    pinBtn.addEventListener('click', (e)=>{
      e.preventDefault();
      state.pinned = !state.pinned;
      applyPinned(); save();
    });
  } catch (err) {
    try { panel.classList.add('mpl-vc-hidden'); panel.style.display='none'; } catch(_){}
  }
})();
</script>


<style id="mpl-theme-vars-css-v3">
:root{
  --bg:#f7f7fb;
  --fg:#111111;
  --muted:#6b7280;
  --b:rgba(0,0,0,0.12);
  --brightness:1;
  color-scheme: light dark;
}
html{background:var(--bg);color:var(--fg);filter:brightness(var(--brightness));}
body{background:transparent}
.mpl-theme-row{font:inherit}
.mpl-theme-row details{margin:.5rem 0}
.mpl-theme-row summary{cursor:pointer;user-select:none}
.mpl-theme-row input[type="color"],
.mpl-theme-row input[type="range"],
.mpl-theme-row input[type="checkbox"],
.mpl-theme-row button{margin:.25rem .5rem .25rem 0}
.mpl-theme-row label{margin-right:.25rem}
.mpl-theme-muted{opacity:.8}
</style>


<script id="mpl-theme-auto-js-v3">
/* Auto theme (day/night by local time) + footer UI + persistence (mpl.theme.v2) */
(() => {
  const KEY='mpl.theme.v2';
  const DAY_START=7, DAY_END=19; // 07:00 inclusive -> 19:00 exclusive

  const state = (()=> {
    try{ return Object.assign({auto:true,color:null,brightness:1}, JSON.parse(localStorage.getItem(KEY) || '{}')); }
    catch{ return {auto:true,color:null,brightness:1}; }
  })();

  function hexToRgb(hex){
    if (!hex) return {r:255,g:255,b:255};
    const m = hex.replace('#','').match(/^([0-9a-f]{3}|[0-9a-f]{6})$/i);
    if(!m) return {r:255,g:255,b:255};
    let v = m[1];
    if (v.length===3) v = v.split('').map(ch=>ch+ch).join('');
    const num = parseInt(v,16);
    return {r:(num>>16)&255,g:(num>>8)&255,b:num&255};
  }
  function luminance({r,g,b}){ // sRGB -> relative luminance
    const srgb = [r,g,b].map(c=>{ c/=255; return c<=0.03928? c/12.92 : Math.pow((c+0.055)/1.055,2.4); });
    return 0.2126*srgb[0]+0.7152*srgb[1]+0.0722*srgb[2];
  }
  function derivePalette(baseHex){
    const rgb = hexToRgb(baseHex);
    const L = luminance(rgb);
    const fg = (1 - L) > 0.45 ? '#ffffff' : '#111111'; // ensure contrast-ish
    const muted = (L > 0.5) ? '#6b7280' : '#9ca3af';
    const border = (L > 0.5) ? 'rgba(0,0,0,0.12)' : 'rgba(255,255,255,0.18)';
    return {bg: baseHex, fg, muted, b: border};
  }

  function isDay(){
    const h = new Date().getHours();
    return (h >= DAY_START && h < DAY_END);
  }

  function applyTheme(){
    const root = document.documentElement;
    let bg, fg, muted, b;
    let brightness = Number(state.brightness || 1) || 1;

    if (state.auto){
      const day = isDay();
      const dayBg = '#f7f7fb', nightBg = '#0b0b10';
      const pal = derivePalette(day ? dayBg : nightBg);
      bg = pal.bg; fg = pal.fg; muted = pal.muted; b = pal.b;
      root.dataset.mplTheme = day ? 'day-auto' : 'night-auto';
    } else {
      const base = state.color || '#f7f7fb';
      const pal = derivePalette(base);
      bg = pal.bg; fg = pal.fg; muted = pal.muted; b = pal.b;
      delete root.dataset.mplTheme;
    }

    root.style.setProperty('--bg', bg);
    root.style.setProperty('--fg', fg);
    root.style.setProperty('--muted', muted);
    root.style.setProperty('--b', b);
    root.style.setProperty('--brightness', String(brightness));
  }

  function save(){ try{ localStorage.setItem(KEY, JSON.stringify(state)); }catch{} }

  function ensureFooter(){
    let footer = document.querySelector('#footer2025, .footer-2025, footer');
    if (!footer) { footer = document.createElement('footer'); document.body.appendChild(footer); }
    let row = footer.querySelector('.mpl-theme-row');
    if (row) return row;

    row = document.createElement('div');
    row.className = 'mpl-theme-row';
    const details = document.createElement('details');
    details.open = false;
    const summary = document.createElement('summary');
    summary.textContent = 'Theme';
    details.appendChild(summary);

    const form = document.createElement('div');

    // Auto toggle
    const autoId = 'mpl-theme-auto';
    const autoLabel = document.createElement('label');
    autoLabel.setAttribute('for', autoId);
    autoLabel.textContent = 'Auto';
    const auto = document.createElement('input');
    auto.type = 'checkbox'; auto.id = autoId;

    // Color picker
    const colorId = 'mpl-theme-color';
    const colorLabel = document.createElement('label');
    colorLabel.setAttribute('for', colorId);
    colorLabel.textContent = 'Color';
    const color = document.createElement('input');
    color.type = 'color'; color.id = colorId; color.value = state.color || '#f7f7fb';

    // Brightness
    const rangeId = 'mpl-theme-brightness';
    const rangeLabel = document.createElement('label');
    rangeLabel.setAttribute('for', rangeId);
    rangeLabel.textContent = 'Brightness';
    const range = document.createElement('input');
    range.type = 'range'; range.min = '0.85'; range.max = '1.25'; range.step = '0.01'; range.id = rangeId; range.value = String(state.brightness || 1);

    // Reset
    const reset = document.createElement('button');
    reset.type = 'button'; reset.textContent = 'Reset';

    form.append(autoLabel, auto, colorLabel, color, rangeLabel, range, reset);
    details.appendChild(form);
    row.appendChild(details);
    footer.appendChild(row);

    // wire events
    function reflectControls(){
      auto.checked = !!state.auto;
      color.disabled = !!state.auto;
      range.disabled = !!state.auto;
      if (!state.color) color.value = '#f7f7fb';
    }
    reflectControls();

    auto.addEventListener('change', ()=>{
      state.auto = auto.checked;
      if (state.auto){
        save(); applyTheme(); reflectControls();
      } else { save(); applyTheme(); reflectControls(); }
    });

    color.addEventListener('input', ()=>{
      if (state.auto) return;
      state.color = color.value;
      save(); applyTheme();
    });

    range.addEventListener('input', ()=>{
      if (state.auto) return;
      state.brightness = Number(range.value);
      save(); applyTheme();
    });

    reset.addEventListener('click', ()=>{
      state.auto = true; state.color = null; state.brightness = 1;
      save(); applyTheme(); reflectControls();
    });

    return row;
  }

  function scheduleMinuteTicks(){
    if (!state.auto) return;
    const now = new Date();
    const msToNextMinute = (60 - now.getSeconds())*1000 - now.getMilliseconds();
    setTimeout(()=> {
      applyTheme();
      setInterval(()=>{ if (state.auto) applyTheme(); }, 60000);
    }, Math.max(0, msToNextMinute));
  }

  function init(){
    applyTheme();
    ensureFooter();
    scheduleMinuteTicks();
  }

  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', init);
  else init();
})();
</script>


<script id="mpl-footer-menu-js-v3">
/* Footer "Explore" — mirror desktop top-level nav into collapsible footer sections */
(() => {
  const q = (sel, ctx=document) => Array.from(ctx.querySelectorAll(sel));
  function findSubmenu(el){
    return el.querySelector(':scope > .submenu, :scope > [role="menu"], :scope > ul, :scope > .dropdown-menu, :scope > ol');
  }
  function topNavGroups(){
    const navs = q('header nav, nav[role="navigation"], nav.primary, .navbar nav, nav');
    const groups = new Set();
    navs.forEach(nav=>{
      const ul = nav.querySelector(':scope > ul');
      const kids = ul ? Array.from(ul.children) : Array.from(nav.children);
      kids.forEach(node => { const sub = findSubmenu(node); if (sub) groups.add(node); });
    });
    return Array.from(groups);
  }
  function ensureFooterRoot(){
    let footer = document.querySelector('#footer2025, .footer-2025, footer');
    if (!footer) { footer = document.createElement('footer'); document.body.appendChild(footer); }
    return footer;
  }
  function structuredFooterExists(footer){
    // Heuristic: existing list-heavy footer with at least 2 headings and link lists
    const hasLists = footer.querySelectorAll('ul li a, nav a').length >= 8;
    const hasHeadings = footer.querySelectorAll('h2, h3, h4').length >= 2;
    return hasLists && hasHeadings;
  }

  function buildExplore(){
    const footer = ensureFooterRoot();
    if (footer.querySelector('.mpl-footer-explore')) return; // already built

    if (structuredFooterExists(footer)) {
      // Enhance: add chevron toggles to existing sections with lists
      const sections = q('section, .column, .col, .links, nav, .footer-group', footer).filter(s=> s.querySelector('ul, ol'));
      sections.forEach((sec, idx)=>{
        let heading = sec.querySelector('h2, h3, h4, summary');
        if (!heading) return;
        // wrap heading text with a toggle button
        if (!sec.querySelector(':scope > .mpl-footer-toggle')){
          const btn = document.createElement('button');
          btn.className = 'mpl-footer-toggle';
          btn.type = 'button';
          btn.setAttribute('aria-expanded','false');
          btn.innerHTML = heading.textContent + ' <span aria-hidden="true">▾</span>';
          heading.replaceWith(btn);
          const list = sec.querySelector('ul, ol') || document.createElement('div');
          list.setAttribute('data-mpl-footer-list','');
          list.style.display = 'none';
          const onToggle = ()=>{
            const open = btn.getAttribute('aria-expanded')==='true';
            q('.mpl-footer-toggle[aria-expanded="true"]', footer).forEach(b=>{
              if (b!==btn){ b.setAttribute('aria-expanded','false'); const l = b.nextElementSibling; if(l) l.style.display = 'none'; }
            });
            btn.setAttribute('aria-expanded', String(!open));
            list.style.display = open ? 'none' : '';
          };
          btn.addEventListener('click', onToggle);
          btn.addEventListener('keydown', (e)=>{ if (e.key==='Enter' || e.key===' ') { e.preventDefault(); onToggle(); } if (e.key==='Escape'){ btn.setAttribute('aria-expanded','false'); list.style.display='none'; btn.focus(); }});
        }
      });
      return;
    }

    // Build mirrored Explore menu
    const container = document.createElement('nav');
    container.className = 'mpl-footer-explore';
    const title = document.createElement('h2');
    title.textContent = 'Explore';
    container.appendChild(title);

    const groups = topNavGroups();
    groups.forEach((g, idx)=>{
      const section = document.createElement('section');
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.className = 'mpl-footer-toggle';
      btn.setAttribute('aria-expanded','false');

      // label text
      let labelNode = g.querySelector(':scope > a, :scope > button, :scope > [role="button"], :scope > .label, :scope > .menu-label');
      const labelText = (labelNode && (labelNode.textContent||'').trim()) || ('Menu ' + (idx + 1));
      btn.innerHTML = labelText + ' <span aria-hidden="true">▾</span>';

      // items
      const list = document.createElement('ul');
      const submenu = findSubmenu(g);
      if (submenu){
        const links = q('a[href], [data-href]', submenu);
        links.forEach(a=>{
          const li = document.createElement('li');
          const href = a.getAttribute('href') || a.getAttribute('data-href') || '#';
          const text = (a.textContent||'').trim() || href;
          const cl = document.createElement('a'); cl.href = href; cl.textContent = text;
          li.appendChild(cl); list.appendChild(li);
        });
      }
      list.setAttribute('data-mpl-footer-list','');
      list.style.display = 'none';

      const onToggle = ()=>{
        const open = btn.getAttribute('aria-expanded')==='true';
        q('.mpl-footer-toggle[aria-expanded="true"]', container).forEach(b=>{
          if (b!==btn){ b.setAttribute('aria-expanded','false'); const l = b.nextElementSibling; if(l) l.style.display = 'none'; }
        });
        btn.setAttribute('aria-expanded', String(!open));
        list.style.display = open ? 'none' : '';
      };
      btn.addEventListener('click', onToggle);
      btn.addEventListener('keydown', (e)=>{ if (e.key==='Enter' || e.key===' ') { e.preventDefault(); onToggle(); } if (e.key==='Escape'){ btn.setAttribute('aria-expanded','false'); list.style.display='none'; btn.focus(); }});

      section.appendChild(btn);
      section.appendChild(list);
      container.appendChild(section);
    });

    ensureFooterRoot().appendChild(container);
  }

  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', buildExplore);
  else buildExplore();
})();
</script>

</body>
</html>